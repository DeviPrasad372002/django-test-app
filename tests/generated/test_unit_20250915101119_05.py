import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

import pytest

try:
    from conduit.apps.articles.renderers import ArticleJSONRenderer, CommentJSONRenderer
    from conduit.apps.articles.views import CommentsDestroyAPIView
except ImportError:
    pytest.skip("Project or Django not available - skipping tests", allow_module_level=True)


@pytest.mark.parametrize(
    "renderer_cls, data, expected_key_subbytes, expect_nonempty",
    [
        (ArticleJSONRenderer, {"title": "Hello"}, b'"article"', True),
        (ArticleJSONRenderer, [{"title": "List"}], b'"articles"', True),
        (ArticleJSONRenderer, None, b"", False),
        (CommentJSONRenderer, {"body": "Nice"}, b'"comment"', True),
        (CommentJSONRenderer, [{"body": "Nice"}], b'"comments"', True),
        (CommentJSONRenderer, None, b"", False),
    ],
)
def test_renderers_wrap_payload_under_expected_keys(renderer_cls, data, expected_key_subbytes, expect_nonempty):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    renderer = renderer_cls()

    # Act
    # render signature in DRF is render(self, data, accepted_media_type=None, renderer_context=None)
    output = renderer.render(data)

    # Assert
    # Expect bytes-like output from DRF renderers
    assert isinstance(output, (bytes, bytearray)), "Renderer must return bytes-like output"
    if expect_nonempty:
        # When data provided, output should not be empty and must include wrapper key and content field keys
        assert len(output) > 0
        assert expected_key_subbytes in output
        # Check presence of a field name from the input to ensure the payload was serialized
        if isinstance(data, dict):
            # pick one key from dict and assert it's in output
            sample_key = list(data.keys())[0]
            assert f'"{sample_key}"'.encode() in output
        elif isinstance(data, list) and data:
            sample_key = list(data[0].keys())[0]
            assert f'"{sample_key}"'.encode() in output
    else:
        # When data is None, DRF renderers typically return empty bytes
        assert output == b""


def test_comments_destroy_view_calls_delete_and_returns_204():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    view = CommentsDestroyAPIView()

    class DummyComment:
        def __init__(self):
            self.deleted = False

        def delete(self):
            self.deleted = True

    dummy = DummyComment()

    # Provide a minimal fake request object; some DRF internals expect request attribute to exist
    class DummyRequest:
        pass

    request = DummyRequest()
    request.user = object()

    # Bypass permission checks to focus test on deletion behavior
    view.check_object_permissions = lambda request, obj: None
    # Make get_object return our dummy comment
    view.get_object = lambda: dummy

    # Act
    response = view.destroy(request=request, slug="an-slug", pk=1)

    # Assert
    assert getattr(dummy, "deleted", False) is True, "Expected the comment.delete() to be called"
    # DRF convention for successful destroy is 204 No Content
    assert hasattr(response, "status_code"), "Expected a Response-like object with status_code"
    assert response.status_code == 204


def test_comments_destroy_view_propagates_errors_from_get_object():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    view = CommentsDestroyAPIView()

    class DummyRequest:
        pass

    request = DummyRequest()
    request.user = object()

    view.check_object_permissions = lambda request, obj: None

    def raise_not_found():
        raise LookupError("not found")

    view.get_object = raise_not_found

    # Act / Assert: ensure exception is propagated so upstream handlers may convert it to appropriate HTTP responses
    with pytest.raises(LookupError):
        view.destroy(request=request, slug="missing", pk=999)
