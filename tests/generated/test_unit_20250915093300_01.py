import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

import pytest as _pytest
_pytest.skip('generator: banned private imports detected; skipping module', allow_module_level=True)

try:
    import pytest
    from types import SimpleNamespace

    # target modules
    from conduit.apps.articles import models as articles_models
    from conduit.apps.articles import signals as articles_signals
    from conduit.apps.articles import relations as articles_relations

    # utilities
    from conduit.apps.core import utils as core_utils
    from django.utils.text import slugify
    from rest_framework import serializers as drf_serializers
except ImportError as e:
    import pytest as _pytest
    _pytest.skip("Required third-party modules not available: {}".format(e), allow_module_level=True)


def test_article___str__prefers_title_then_body():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # two representative Article-like instances (no DB save)
    a_with_title = articles_models.Article(title="My Great Article", body="Body text")
    a_no_title = articles_models.Article(title=None, body="Only body text")
    a_empty_title = articles_models.Article(title="", body="Fallback body")

    # Act
    s_with_title = str(a_with_title)
    s_no_title = str(a_no_title)
    s_empty_title = str(a_empty_title)

    # Assert
    # Prefer title when present and non-empty, otherwise fall back to body
    assert isinstance(s_with_title, str)
    assert s_with_title == "My Great Article"

    assert isinstance(s_no_title, str)
    assert s_no_title == "Only body text"

    assert isinstance(s_empty_title, str)
    assert s_empty_title == "Fallback body"


def test_add_slug_to_article_if_not_exists_adds_slug_and_respects_existing(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # Make the random generator deterministic
    monkeypatch.setattr(core_utils, "generate_random_string", lambda length: "RND")

    # Create a minimal article-like object
    article = SimpleNamespace(title="Hello World!", slug=None)

    # Act
    # Simulate Django post-save signal: sender irrelevant for function behavior
    articles_signals.add_slug_to_article_if_not_exists(sender=None, instance=article, created=True)

    # Assert
    expected_slug = slugify("Hello World!") + "-" + "RND"
    assert isinstance(article.slug, str)
    assert article.slug == expected_slug

    # Arrange (existing slug)
    article_existing = SimpleNamespace(title="Another", slug="preexisting-slug")
    # Act
    articles_signals.add_slug_to_article_if_not_exists(sender=None, instance=article_existing, created=True)
    # Assert - should not overwrite existing slug
    assert article_existing.slug == "preexisting-slug"


def test_tagrelatedfield_to_internal_and_representation(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # Create a fake Tag class to avoid DB operations
    class FakeTag:
        def __init__(self, name):
            self.name = name

        @classmethod
        def get_or_create(cls, name):
            # mimic Django's get_or_create returning (instance, created)
            return (cls(name), True)

        def __repr__(self):
            return f"<FakeTag {self.name}>"

    # Monkeypatch the Tag used in the relations module
    monkeypatch.setattr(articles_relations, "Tag", FakeTag, raising=False)

    # Instantiate the field
    field = articles_relations.TagRelatedField()

    # Act - to_internal_value should return a FakeTag instance for a valid string
    internal = field.to_internal_value("python")

    # Assert
    assert isinstance(internal, FakeTag)
    assert internal.name == "python"

    # Act - to_representation should return the tag name when given an object with .name
    rep = field.to_representation(FakeTag("python"))

    # Assert
    assert isinstance(rep, str)
    assert rep == "python"


@pytest.mark.parametrize("invalid_input", [None, 123, 3.14, [], {}])
def test_tagrelatedfield_to_internal_value_invalid_types_raise_validation_error(invalid_input, monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # Set up Tag to avoid side effects even though invalid input should raise before DB use
    class DummyTag:
        @classmethod
        def get_or_create(cls, name):
            return (cls(), True)

    monkeypatch.setattr(articles_relations, "Tag", DummyTag, raising=False)
    field = articles_relations.TagRelatedField()

    # Act / Assert: non-string inputs should raise DRF ValidationError
    with pytest.raises(drf_serializers.ValidationError):
        field.to_internal_value(invalid_input)
