import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import json
    import re
    import pytest
    from conduit.apps.articles.renderers import ArticleJSONRenderer, CommentJSONRenderer
    from conduit.apps.articles.signals import add_slug_to_article_if_not_exists
    from conduit.apps.core.utils import generate_random_string
except Exception as e:  # pragma: no cover - skip module if target imports unavailable
    import pytest
    pytest.skip(f"Skipping conduit-related tests due to import error: {e}", allow_module_level=True)


@pytest.mark.parametrize(
    "renderer_class,input_data,expected_key",
    [
        (ArticleJSONRenderer, {"title": "Test"}, "article"),
        (ArticleJSONRenderer, {"title": "Nested", "meta": {"a": 1}}, "article"),
        (CommentJSONRenderer, {"body": "Nice post"}, "comment"),
    ],
)
def test_renderer_wraps_payload_in_expected_top_level_key(renderer_class, input_data, expected_key):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    renderer = renderer_class()

    # Act
    # Most DRF renderers accept (data, accepted_media_type=None, renderer_context=None)
    rendered_bytes = renderer.render(input_data)

    # Assert
    assert isinstance(rendered_bytes, (bytes, bytearray)), "Renderer must return bytes"
    decoded = rendered_bytes.decode("utf-8")
    # Should be valid JSON
    parsed = json.loads(decoded)
    assert expected_key in parsed, f"Rendered JSON must have top-level key '{expected_key}'"
    # The wrapped value should equal the original data structure
    assert parsed[expected_key] == input_data


def test_add_slug_to_article_if_not_exists_sets_slug_on_created_instance():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    class DummyArticle:
        def __init__(self, title, slug=None):
            self.title = title
            self.slug = slug

    article = DummyArticle(title="Hello World! Nice", slug=None)

    # Act
    # Typical Django signal handler signature: (sender, instance, created, **kwargs)
    add_slug_to_article_if_not_exists(sender=None, instance=article, created=True)

    # Assert
    assert isinstance(article.slug, str) and article.slug, "Slug must be a non-empty string after handler"
    # basic sanity of slug: lowercase words separated by hyphens derived from title
    assert "hello-world" in article.slug, "Slug should be derived from title and contain 'hello-world'"
    # calling again with created=True should not produce an empty/invalid slug
    previous = article.slug
    add_slug_to_article_if_not_exists(sender=None, instance=article, created=True)
    assert article.slug == previous, "Handler should not unexpectedly change an existing slug"


@pytest.mark.parametrize("created_flag,initial_slug,expect_set", [
    (False, None, False),   # if not created, handler should probably not set slug
    (True, None, True),     # when created, slug should be set
    (True, "existing", False),  # existing slug should be preserved
])
def test_add_slug_to_article_if_not_exists_respects_created_and_existing_slug(created_flag, initial_slug, expect_set):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    class DummyArticle:
        def __init__(self, title, slug=None):
            self.title = title
            self.slug = slug

    article = DummyArticle(title="Edge Case Title", slug=initial_slug)

    # Act
    add_slug_to_article_if_not_exists(sender=None, instance=article, created=created_flag)

    # Assert
    if expect_set:
        assert isinstance(article.slug, str) and article.slug, "Slug expected to be set for created instance without slug"
    else:
        # slug should remain as initial (possibly None)
        assert article.slug == initial_slug, "Slug should not change when not expected"


@pytest.mark.parametrize("length", [6, 8, 12])
def test_generate_random_string_returns_alphanumeric_string_of_requested_length(length):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange / Act
    out = generate_random_string(length)

    # Assert
    assert isinstance(out, str), "generate_random_string must return a string"
    assert len(out) == length, f"Expected length {length}, got {len(out)}"
    # Only allow alphanumeric characters (letters and digits)
    assert re.fullmatch(r"[A-Za-z0-9]+", out), "Generated string must be strictly alphanumeric"
