import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import pytest
    import string
    from conduit.apps.core import utils as core_utils
    from conduit.apps.articles import signals as article_signals
    from conduit.apps.authentication import models as auth_models
except ImportError as e:
    import pytest
    pytest.skip("Required application modules not available: {}".format(e), allow_module_level=True)


@pytest.mark.parametrize("length", [8, 1, 0])
def test_generate_random_string_returns_expected_length_and_alnum(length):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    fn = getattr(core_utils, "generate_random_string", None)
    if not callable(fn):
        pytest.skip("generate_random_string not present")

    # Act
    result = fn(length)

    # Assert - concrete type and length
    assert isinstance(result, str)
    assert len(result) == length

    # Assert characters are alphanumeric when non-empty
    if length > 0:
        assert all(ch.isalnum() for ch in result)
        # two calls should generally produce different values (non-deterministic)
        other = fn(length)
        # It's possible (though unlikely) they are equal; check that at least result is a string and same length
        assert isinstance(other, str) and len(other) == length
    else:
        assert result == ""


@pytest.mark.parametrize("title", [
    "Hello World!",
    "Complex -- Title: Testing, 1 2 3",
    "Already-Slugged_Title"
])
def test_add_slug_to_article_if_not_exists_creates_slug_when_missing(title):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    fn = getattr(article_signals, "add_slug_to_article_if_not_exists", None)
    if not callable(fn):
        pytest.skip("add_slug_to_article_if_not_exists not present")

    class DummyArticle:
        def __init__(self, title, slug=None):
            self.title = title
            self.slug = slug

    instance = DummyArticle(title=title, slug=None)

    # Provide a small helper slugify fallback if django isn't available
    try:
        from django.utils.text import slugify as django_slugify  # type: ignore
        slugify = django_slugify
    except Exception:
        def slugify(s: str) -> str:
            # naive fallback: keep alnum, replace spaces with hyphens, lowercase
            cleaned = "".join(ch if ch.isalnum() or ch.isspace() else " " for ch in s)
            return "-".join(cleaned.lower().split())

    # Act
    # typical signal signature: (sender, instance, created, **kwargs)
    # call with created=True to simulate newly created object
    try:
        fn(None, instance, True)
    except TypeError:
        # some implementations accept kwargs instead of positional created
        fn(None, instance, created=True)

    # Assert - slug created and contains slugified representation of title (or at least lowered tokens)
    assert isinstance(instance.slug, str) and instance.slug != ""
    expected_prefix = slugify(title).split("-")[0]
    # ensure that at least the first token of slugified title is in the slug
    assert expected_prefix in instance.slug


def test_user_manager_create_user_raises_on_missing_email():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    Manager = getattr(auth_models, "UserManager", None)
    if Manager is None:
        pytest.skip("UserManager not present")

    manager = Manager()

    # Act / Assert - email is required in typical implementations
    # Arrange-Act-Assert: calling without email should raise ValueError
    with pytest.raises(ValueError):
        manager.create_user(email=None, username="tester", password="pass123")
