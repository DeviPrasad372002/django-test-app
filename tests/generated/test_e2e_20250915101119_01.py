import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import pytest
    from types import SimpleNamespace
    import datetime

    from conduit.apps.articles.signals import add_slug_to_article_if_not_exists
    from conduit.apps.articles.relations import TagRelatedField
    from conduit.apps.articles.serializers import ArticleSerializer
    from conduit.apps.articles.models import Article
    from django.utils.text import slugify
    from rest_framework.exceptions import ValidationError
except ImportError:
    import pytest  # re-import to ensure name exists in this branch
    pytest.skip("Django or project modules not available, skipping tests", allow_module_level=True)


def test_add_slug_to_article_if_not_exists_assigns_and_preserves(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # Make generate_random_string deterministic for the test
    monkeypatch.setattr(
        "conduit.apps.articles.signals.generate_random_string",
        lambda length=6: "fixedrnd",
        raising=False,
    )

    # Instance without slug should get one based on title
    instance = SimpleNamespace(title="My Fancy Title!", slug=None)

    # Act
    add_slug_to_article_if_not_exists(sender=None, instance=instance, created=True)

    # Assert
    assert isinstance(instance.slug, str), "slug should be a string after signal"
    assert instance.slug != "", "slug should not be empty"
    # Expect slug to start with slugified title and end with our deterministic suffix
    expected_start = slugify("My Fancy Title!")
    assert instance.slug.startswith(expected_start), "slug should start with slugified title"
    assert instance.slug.endswith("fixedrnd"), "slug should include deterministic random suffix"

    # Assert that existing slug is preserved
    instance2 = SimpleNamespace(title="Another Title", slug="already-there")
    add_slug_to_article_if_not_exists(sender=None, instance=instance2, created=True)
    assert instance2.slug == "already-there", "existing slug should not be changed by the signal"

    # Also assert Article.__str__ returns title for a plain (unsaved) model instance
    article = Article(title="Str Title")
    assert str(article) == "Str Title"


@pytest.mark.parametrize(
    "input_value, expect_exception",
    [
        ("python", False),  # normal string tag
        (["not", "a", "string"], True),  # invalid type should raise validation error
    ],
)
def test_tagrelatedfield_to_representation_and_internal_value(input_value, expect_exception):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    field = TagRelatedField()

    # Act & Assert - to_representation should return the .name attribute of an object
    tag_obj = SimpleNamespace(name="pytest-tag")
    rep = field.to_representation(tag_obj)
    assert isinstance(rep, str)
    assert rep == "pytest-tag"

    # Act & Assert - to_internal_value behavior: either return a string/tag or raise ValidationError
    if expect_exception:
        with pytest.raises(ValidationError):
            field.to_internal_value(input_value)
    else:
        result = field.to_internal_value(input_value)
        # Accept either raw string or object with .name attribute
        if isinstance(result, str):
            assert result == input_value
        else:
            # object expected
            assert hasattr(result, "name")
            assert result.name == input_value


def test_articleserializer_get_favorites_count_and_timestamps():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    serializer = ArticleSerializer()

    # Create a dummy "article-like" object with favorites count and timestamps
    class DummyFavorites:
        def __init__(self, n):
            self._n = n

        def count(self):
            return self._n

    created = datetime.datetime(2020, 1, 2, 3, 4, 5, tzinfo=datetime.timezone.utc)
    updated = datetime.datetime(2021, 6, 7, 8, 9, 10, tzinfo=datetime.timezone.utc)
    article_like = SimpleNamespace(favorites=DummyFavorites(5), created_at=created, updated_at=updated)

    # Act
    fav_count = serializer.get_favorites_count(article_like)
    created_str = serializer.get_created_at(article_like)
    updated_str = serializer.get_updated_at(article_like)

    # Assert
    assert isinstance(fav_count, int)
    assert fav_count == 5

    assert isinstance(created_str, str)
    assert "2020" in created_str and "01" in created_str, "created_at should be formatted and contain the date"

    assert isinstance(updated_str, str)
    assert "2021" in updated_str and "06" in updated_str, "updated_at should be formatted and contain the date"
