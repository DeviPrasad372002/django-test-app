import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

import pytest
from types import SimpleNamespace
from unittest.mock import Mock

try:
    from target.conduit.apps.core import utils as core_utils_module
    from target.conduit.apps.authentication import models as auth_models_module
    from target.conduit.apps.authentication.renderers import UserJSONRenderer
    from target.conduit.apps.authentication import signals as auth_signals_module
    from target.conduit.apps.core import exceptions as core_exceptions_module
    from target.conduit.apps.profiles import models as profiles_models_module
except ImportError:
    pytest.skip("Project modules not available; skipping tests", allow_module_level=True)


# Tests for generate_random_string
@pytest.mark.parametrize("length", [8, 1, 0])
def test_generate_random_string_lengths_and_chars(length):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    gen = getattr(core_utils_module, "generate_random_string", None)
    assert gen is not None, "generate_random_string should exist"

    # Act
    result = gen(length)

    # Assert - correct type and length
    assert isinstance(result, str)
    assert len(result) == length

    # Assert characters are alphanumeric ASCII subset (if length > 0)
    if length > 0:
        allowed = set("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789")
        assert set(result).issubset(allowed)


# Tests for User._generate_jwt_token and get_short_name
def test_user_generate_jwt_token_and_get_short_name(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    User = getattr(auth_models_module, "User", None)
    assert User is not None, "User model must be present"

    # Create a bare instance without DB operations
    u = User()
    # common attribute used by many implementations
    setattr(u, "pk", 42)
    setattr(u, "id", 42)
    setattr(u, "username", "alice")
    setattr(u, "email", "alice@example.com")

    # Provide fake settings object expected by implementation
    fake_settings = SimpleNamespace(SECRET_KEY="sekrit", JWT_EXPIRATION_DELTA=None)
    monkeypatch.setattr(auth_models_module, "settings", fake_settings, raising=False)

    # Provide a fake jwt with an encode function that returns a deterministic value
    class DummyJWT:
        def encode(self, payload, secret, algorithm="HS256"):
            # simulate jwt.encode return type (string or bytes)
            return "encoded:%s" % payload.get("id")

    monkeypatch.setattr(auth_models_module, "jwt", DummyJWT(), raising=False)

    # Act - call token generator
    token = u._generate_jwt_token()

    # Assert - token reflects our dummy encode logic
    assert isinstance(token, (str, bytes))
    # normalize bytes->str
    token_str = token.decode() if isinstance(token, bytes) else token
    assert "encoded:42" in token_str

    # Act - get_short_name should prefer username
    short_name = u.get_short_name()
    assert isinstance(short_name, str)
    assert short_name == "alice"

    # Act/Assert - if username empty, returns email (edge case)
    u.username = ""
    short_name2 = u.get_short_name()
    assert short_name2 == "alice@example.com"


# Tests for UserJSONRenderer.render
@pytest.mark.parametrize("data", [
    ({"user": {"username": "bob"}}),
    ({"errors": {"detail": "Oops"}}),
    ({}),
])
def test_userjsonrenderer_render_returns_bytes_and_contains_keys(data):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    renderer = UserJSONRenderer()

    # Act
    rendered = renderer.render(data, accepted_media_type=None, renderer_context=None)

    # Assert
    assert isinstance(rendered, (bytes, str))
    # normalize to str for contains checks
    rendered_str = rendered.decode() if isinstance(rendered, bytes) else rendered
    # Should be JSON-like string containing at least a top-level key from the input when present
    if data:
        # pick a top-level key from data to assert present
        top_key = next(iter(data.keys()))
        assert top_key in rendered_str
    else:
        # empty dict should serialize to some JSON representation (object)
        assert rendered_str.strip() in ("{}", "" , "null")


# Tests for create_related_profile signal handler
def test_create_related_profile_creates_profile_when_created(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    handler = getattr(auth_signals_module, "create_related_profile", None)
    assert handler is not None

    fake_user = SimpleNamespace(pk=11)
    created_called = {}

    # Prepare a fake Profile class with objects.create capturing call
    class FakeManager:
        def __init__(self):
            self.create = Mock(side_effect=lambda **kwargs: created_called.update(kwargs) or SimpleNamespace(**kwargs))

    FakeProfile = SimpleNamespace(objects=FakeManager())

    # Monkeypatch the Profile reference inside the signals module
    monkeypatch.setattr(auth_signals_module, "Profile", FakeProfile, raising=False)

    # Act - created True should trigger creation
    result = handler(sender=None, instance=fake_user, created=True)

    # Assert - objects.create called with the user keyword
    assert "user" in created_called
    assert created_called["user"] is fake_user

    # Act - created False should not call create (reset and call)
    created_called.clear()
    result2 = handler(sender=None, instance=fake_user, created=False)

    # Assert - no creation attempted
    assert created_called == {}


# Tests for core exception handlers
def test_handle_generic_and_not_found_errors_and_core_exception_handler(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # Provide dummy Response class to capture data and status
    class DummyResponse:
        def __init__(self, data, status=None):
            self.data = data
            self.status_code = status

    # Monkeypatch Response into the module under test
    monkeypatch.setattr(core_exceptions_module, "Response", DummyResponse, raising=False)

    # Access handlers
    handle_generic = getattr(core_exceptions_module, "_handle_generic_error", None)
    handle_not_found = getattr(core_exceptions_module, "_handle_not_found_error", None)
    core_handler = getattr(core_exceptions_module, "core_exception_handler", None)

    assert handle_generic is not None
    assert handle_not_found is not None
    assert core_handler is not None

    # Act - generic error
    exc = Exception("something went wrong")
    generic_resp = handle_generic(exc, context={})

    # Assert - response contains expected structure and 500 status
    assert isinstance(generic_resp, DummyResponse)
    assert getattr(generic_resp, "status_code", None) in (500, None)
    # should expose some error text
    assert "error" in str(generic_resp.data).lower() or "detail" in str(generic_resp.data).lower() or generic_resp.data

    # Act - not found error
    nf_exc = Exception("not found")
    nf_resp = handle_not_found(nf_exc, context={})

    # Assert - Response with 404-ish status
    assert isinstance(nf_resp, DummyResponse)
    assert getattr(nf_resp, "status_code", None) in (404, None)
    assert nf_resp.data is not None

    # Act - core_exception_handler should route unknown exception to generic handler
    called = {}
    def fake_generic(e, context):
        called['generic'] = True
        return "GENERIC"

    def fake_notfound(e, context):
        called['notfound'] = True
        return "NOTFOUND"

    monkeypatch.setattr(core_exceptions_module, "_handle_generic_error", fake_generic, raising=False)
    monkeypatch.setattr(core_exceptions_module, "_handle_not_found_error", fake_notfound, raising=False)

    result = core_handler(Exception("x"), context={})
    assert result == "GENERIC"
    assert called.get('generic') is True
    assert 'notfound' not in called


# Tests for follow/unfollow/is_following behavior on Profile model methods using stubs
def test_profile_follow_unfollow_and_is_following_calls_manager_methods():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    Profile = getattr(profiles_models_module, "Profile", None)
    assert Profile is not None, "Profile model must exist"

    # Build stub objects
    # Stub for the "following" related manager with add/remove/filter->exists
    following_manager = Mock()
    following_manager.add = Mock()
    following_manager.remove = Mock()
    # For is_following, filter(...).exists() should be supported
    fake_filter_qs = Mock()
    fake_filter_qs.exists = Mock(return_value=True)
    following_manager.filter = Mock(return_value=fake_filter_qs)

    self_stub = SimpleNamespace(following=following_manager)
    other_stub = SimpleNamespace(pk=7)

    # Act - follow should call following.add with the profile object
    ret = Profile.follow(self_stub, other_stub)

    # Assert
    following_manager.add.assert_called_with(other_stub)
    # Many implementations return the followed profile; if they do, ret should be the other
    # Accept either None or the other object to be flexible
    assert (ret is None) or (ret is other_stub)

    # Act - unfollow should call following.remove with the profile object
    ret2 = Profile.unfollow(self_stub, other_stub)
    following_manager.remove.assert_called_with(other_stub)
    assert (ret2 is None) or (ret2 is other_stub)

    # Act - is_following should call filter with pk equal to other_stub.pk and then exists
    # Ensure filter.exists returns True
    following_manager.filter.assert_not_called()  # previous calls shouldn't have invoked filter yet for this test
    is_following_result = Profile.is_following(self_stub, other_stub)

    # Assert - method used the manager's filter and exists chain and returned its boolean
    following_manager.filter.assert_called()
    # Check that exists() was used
    assert fake_filter_qs.exists.called
    assert is_following_result is True

    # Edge case: when exists returns False
    fake_filter_qs.exists.return_value = False
    not_following_result = Profile.is_following(self_stub, other_stub)
    assert not_following_result is False
