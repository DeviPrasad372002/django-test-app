import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

import pytest
try:
    from conduit.apps.core.utils import generate_random_string
    from conduit.apps.articles.signals import add_slug_to_article_if_not_exists
    from conduit.apps.authentication.backends import JWTAuthentication
    from conduit.apps.authentication.models import User
    import jwt
    from django.conf import settings
    from django.utils.text import slugify
except ImportError as e:
    pytest.skip("Skipping tests because imports failed: " + str(e), allow_module_level=True)


def test_generate_random_string_various_lengths():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    lengths = [1, 8, 16]
    # Act / Assert
    for n in lengths:
        s = generate_random_string(n)
        # Assert: correct length and only alphanumeric characters
        assert isinstance(s, str)
        assert len(s) == n
        assert s.isalnum(), "generated string should be alphanumeric"


def test_add_slug_to_article_if_not_exists_sets_and_respects_existing():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    class DummyArticle:
        def __init__(self, title, slug=None):
            self.title = title
            self.slug = slug

    title = "Hello World: Testing Slug!"
    # Act: when slug is missing
    article = DummyArticle(title=title, slug=None)
    add_slug_to_article_if_not_exists(None, article, True)
    # Assert: slug was set and starts with slugified title
    assert isinstance(article.slug, str) and article.slug != ""
    expected_prefix = slugify(title)
    assert article.slug.startswith(expected_prefix), "slug should start with slugified title"

    # Arrange / Act: when slug already exists, it should not change
    existing = "existing-slug-123"
    article2 = DummyArticle(title=title, slug=existing)
    add_slug_to_article_if_not_exists(None, article2, True)
    # Assert: slug unchanged
    assert article2.slug == existing


def test_jwt_authentication_returns_none_when_no_authorization_header(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    auth = JWTAuthentication()
    class DummyRequest:
        META = {}  # no HTTP_AUTHORIZATION present

    req = DummyRequest()
    # Act
    result = auth.authenticate(req)
    # Assert: should be None indicating unauthenticated (no header)
    assert result is None


@pytest.mark.parametrize("user_id", [1, 999])
def test_user_generate_jwt_token_is_decodable(monkeypatch, user_id):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # Ensure we control the secret used by the token generator
    monkeypatch.setattr(settings, "SECRET_KEY", "test-secret-for-jwt", raising=False)

    # Create a minimal dummy object with an id attribute to use with the unbound method
    class DummyUser:
        def __init__(self, id):
            self.id = id

    dummy = DummyUser(user_id)

    # Act: call the model method (unbound) so we don't need a DB-backed model instance
    token = User._generate_jwt_token(dummy)
    assert isinstance(token, (str, bytes)), "token should be a string/bytes"

    # jwt.decode requires algorithm; match typical usage
    decoded = jwt.decode(token, settings.SECRET_KEY, algorithms=["HS256"])
    # Assert: payload includes the id that was encoded
    assert "id" in decoded
    assert int(decoded["id"]) == int(user_id)
