import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import pytest
    import types
    from conduit.apps.profiles import serializers as profiles_serializers
    from conduit.apps.profiles import models as profiles_models
    from conduit.apps.articles import serializers as articles_serializers
except ImportError:
    import pytest
    pytest.skip("Required application modules not available, skipping integration tests", allow_module_level=True)


@pytest.mark.parametrize("is_following_return, include_request", [
    (True, True),
    (False, True),
    (False, False),  # edge: no request in context
])
def test_get_following_delegates_to_is_following(monkeypatch, is_following_return, include_request):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    target_profile = types.SimpleNamespace(username="target")
    current_user = types.SimpleNamespace(username="current")

    if include_request:
        dummy_request = types.SimpleNamespace(user=current_user)
        context = {"request": dummy_request}
    else:
        # missing request scenario
        context = {}

    dummy_self = types.SimpleNamespace(context=context)

    called = {"was_called": False}

    def fake_is_following(user, profile):
        # Assert inside the fake to ensure integration wiring passes expected objects
        assert user is current_user
        assert profile is target_profile
        called["was_called"] = True
        return is_following_return

    # Act
    if include_request:
        monkeypatch.setattr(profiles_models, "is_following", fake_is_following)
        result = profiles_serializers.get_following(dummy_self, target_profile)
        # Assert
        assert isinstance(result, bool)
        assert result == is_following_return
        assert called["was_called"] is True
    else:
        # when no request in context we expect a safe False response (edge behavior)
        # don't patch is_following to ensure it is not called
        result = profiles_serializers.get_following(dummy_self, target_profile)
        assert isinstance(result, bool)
        assert result is False


@pytest.mark.parametrize("has_favorited_return", [True, False])
def test_article_favorited_and_favorites_count_integration(monkeypatch, has_favorited_return, tmp_path):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange - get_favorited should call profiles_models.has_favorited
    article = types.SimpleNamespace(slug="an-article")
    current_user = types.SimpleNamespace(username="alice")
    dummy_request = types.SimpleNamespace(user=current_user)
    dummy_self = types.SimpleNamespace(context={"request": dummy_request})

    called = {"was_called": False}

    def fake_has_favorited(user, article_obj):
        # Assert that the serializer passes both expected objects
        assert user is current_user
        assert article_obj is article
        called["was_called"] = True
        return has_favorited_return

    monkeypatch.setattr(profiles_models, "has_favorited", fake_has_favorited)

    # Act - get_favorited delegates to has_favorited
    favorited_result = articles_serializers.get_favorited(dummy_self, article)

    # Assert
    assert isinstance(favorited_result, bool)
    assert favorited_result == has_favorited_return
    assert called["was_called"] is True

    # Arrange - get_favorites_count should return article.favorites.count()
    class DummyFavorites:
        def __init__(self, n):
            self._n = n

        def count(self):
            return self._n

    article_with_favorites = types.SimpleNamespace(favorites=DummyFavorites(5))

    # Act
    favorites_count = articles_serializers.get_favorites_count(None, article_with_favorites)

    # Assert
    assert isinstance(favorites_count, int)
    assert favorites_count == 5

    # Error path: missing favorites attribute should raise AttributeError
    article_without_favorites = types.SimpleNamespace()  # no favorites attribute
    with pytest.raises(AttributeError):
        articles_serializers.get_favorites_count(None, article_without_favorites)
