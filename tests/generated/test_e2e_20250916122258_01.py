import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

import os, sys, types as _types, pytest as _pytest, warnings
warnings.filterwarnings('ignore', category=DeprecationWarning)
warnings.filterwarnings('ignore', category=PendingDeprecationWarning)
_t = os.environ.get('TARGET_ROOT') or 'target'
if _t and os.path.isdir(_t):
    _p = os.path.abspath(os.path.join(_t, os.pardir))
    [sys.path.insert(0, p) for p in (_p,_t) if p not in sys.path]
    _pkg=_types.ModuleType('target'); _pkg.__path__=[_t]; sys.modules.setdefault('target', _pkg)

try:
    import pytest
    import string
    from conduit.apps.articles.models import Article
    from conduit.apps.articles.signals import add_slug_to_article_if_not_exists
    from conduit.apps.core import utils as core_utils
except Exception as e:
    import pytest
    pytest.skip("Skipping tests because required application modules are not available: {}".format(e), allow_module_level=True)


@pytest.mark.parametrize("title", [
    "Simple Title",
    "",
    None,
])
def test_article_str_returns_title_or_stringified_value(title):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange: create an Article-like instance without touching DB
    article = Article()
    article.title = title

    # Act: call the public __str__ API
    result = str(article)

    # Assert: result is a string and matches stringified title
    assert isinstance(result, str)
    assert result == str(title)


@pytest.mark.parametrize("initial_slug, created, should_change", [
    (None, True, True),     # no slug, created -> slug should be generated
    ("", False, True),      # empty slug, not created -> many implementations still add slug if missing
    ("existing-slug", True, False),  # existing slug should remain unchanged
])
def test_add_slug_to_article_if_not_exists_generates_slug_when_missing(monkeypatch, initial_slug, created, should_change):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # Make generate_random_string deterministic
    monkeypatch.setattr(core_utils, "generate_random_string", lambda n: "x")
    class DummyArticle:
        pass

    inst = DummyArticle()
    inst.title = "Hello World"
    inst.slug = initial_slug

    # Act
    add_slug_to_article_if_not_exists(None, inst, created)

    # Assert
    if should_change:
        assert isinstance(inst.slug, str)
        # slug should contain slugified title prefix
        assert "hello-world" in inst.slug
        # and end with the deterministic random fragment we provided
        assert inst.slug.endswith("-x")
    else:
        assert inst.slug == initial_slug
