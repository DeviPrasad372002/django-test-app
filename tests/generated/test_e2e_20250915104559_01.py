import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import pytest
    from conduit.apps.articles.signals import add_slug_to_article_if_not_exists
    from conduit.apps.articles.__init__ import ArticlesAppConfig
    from conduit.apps.articles.models import Comment
    from conduit.apps.core import utils as core_utils
except ImportError as e:
    import pytest  # re-import to ensure skip works
    pytest.skip(f"Required modules for tests are not available: {e}", allow_module_level=True)


class DummyArticle:
    def __init__(self, title=None, slug=None):
        self.title = title
        self.slug = slug
        self.save_called = False

    def save(self, *args, **kwargs):
        # mimic Django model save
        self.save_called = True


def test_articles_app_ready_does_not_error_and_returns_none():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    app = ArticlesAppConfig("articles", "conduit.apps.articles")
    # Act
    result = app.ready()
    # Assert
    assert result is None


@pytest.mark.parametrize("initial_slug", [None, ""])
def test_add_slug_to_article_if_not_exists_sets_slug_and_calls_save(monkeypatch, initial_slug):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # Make random string deterministic
    monkeypatch.setattr(core_utils, "generate_random_string", lambda n=6: "abc123")
    article = DummyArticle(title="Hello World", slug=initial_slug)
    # Act
    add_slug_to_article_if_not_exists(sender=None, instance=article, created=True)
    # Assert
    # slug should be set to a slugified form including our deterministic random piece
    assert article.slug is not None and isinstance(article.slug, str)
    assert "hello-world" in article.slug.lower()
    assert "abc123" in article.slug
    assert article.save_called is True


def test_add_slug_to_article_if_not_exists_does_not_save_when_slug_already_present(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    monkeypatch.setattr(core_utils, "generate_random_string", lambda n=6: "should_not_be_used")
    existing = DummyArticle(title="Ignored Title", slug="existing-slug")
    # Act
    add_slug_to_article_if_not_exists(sender=None, instance=existing, created=True)
    # Assert
    # existing.slug should remain unchanged and save should not be called
    assert existing.slug == "existing-slug"
    assert existing.save_called is False


def test_add_slug_to_article_if_not_exists_missing_title_raises_attribute_error(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    monkeypatch.setattr(core_utils, "generate_random_string", lambda n=6: "abc123")
    class NoTitle:
        slug = None
        save_called = False
        def save(self): 
            self.save_called = True
    instance = NoTitle()
    # Act / Assert
    with pytest.raises(AttributeError):
        add_slug_to_article_if_not_exists(sender=None, instance=instance, created=True)
