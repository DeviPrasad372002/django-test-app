import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

import pytest
try:
    import json
    from datetime import datetime
    from types import SimpleNamespace
    from conduit.apps.articles import serializers as articles_serializers
    from conduit.apps.articles import renderers as articles_renderers
    from conduit.apps.articles import signals as articles_signals
    from conduit.apps.profiles import models as profiles_models
    from conduit.apps.profiles import serializers as profiles_serializers
except ImportError:
    pytest.skip("Required application modules not available", allow_module_level=True)


@pytest.mark.parametrize("has_favorited_value,is_following_value", [
    (True, True),
    (False, False),
])
def test_article_serializer_includes_favorited_and_author_following(monkeypatch, has_favorited_value, is_following_value):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # Create a minimal fake author and article objects with the attributes the serializer expects.
    class FakeAuthor:
        def __init__(self):
            self.username = "alice"
            self.bio = "Bio of Alice"
            self.image = None

    class FakeArticle:
        def __init__(self):
            self.slug = "test-article"
            self.title = "Test Title"
            self.description = "Desc"
            self.body = "Body"
            self.created_at = datetime(2020, 1, 1, 12, 0, 0)
            self.updated_at = datetime(2020, 1, 2, 13, 0, 0)
            self.favorites_count = 7
            self.author = FakeAuthor()

    article = FakeArticle()

    # Monkeypatch external profile utilities used by the serializer
    monkeypatch.setattr(profiles_models, "has_favorited", lambda user, obj: has_favorited_value)
    monkeypatch.setattr(profiles_serializers, "get_following", lambda author, ctx_user: is_following_value)

    serializer = articles_serializers.ArticleSerializer()

    # Act
    result = serializer.to_representation(article)

    # Assert
    assert isinstance(result, dict)
    # Basic fields present
    assert result["slug"] == "test-article"
    assert result["title"] == "Test Title"
    assert result["description"] == "Desc"
    assert result["body"] == "Body"
    # Dates are converted to strings by serializer methods
    assert isinstance(result["createdAt"], str)
    assert isinstance(result["updatedAt"], str)
    # Favorites state and count
    assert result["favorited"] is has_favorited_value
    assert isinstance(result["favoritesCount"], int)
    assert result["favoritesCount"] == 7
    # Author structure and following flag
    assert isinstance(result["author"], dict)
    assert result["author"]["username"] == "alice"
    assert result["author"]["following"] is is_following_value


def test_comment_serializer_and_renderer_include_author_following(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    class FakeAuthor:
        def __init__(self, username="bob"):
            self.username = username
            self.bio = "Bio B"
            self.image = None

    class FakeComment:
        def __init__(self):
            self.id = 123
            self.created_at = datetime(2021, 5, 1, 10, 0, 0)
            self.updated_at = datetime(2021, 5, 2, 11, 0, 0)
            self.body = "A comment"
            self.author = FakeAuthor()

    comment = FakeComment()

    # Force the profiles serializer helper to report that the requester follows the author.
    monkeypatch.setattr(profiles_serializers, "get_following", lambda author, ctx_user: True)

    comment_serializer = articles_serializers.CommentSerializer()
    comment_renderer = articles_renderers.CommentJSONRenderer()

    # Act
    serialized = comment_serializer.to_representation(comment)
    rendered_bytes = comment_renderer.render({"comment": serialized})
    rendered_text = rendered_bytes.decode("utf-8")
    rendered_json = json.loads(rendered_text)

    # Assert
    assert "comment" in rendered_json
    comment_out = rendered_json["comment"]
    assert comment_out["id"] == 123
    assert comment_out["body"] == "A comment"
    assert isinstance(comment_out["createdAt"], str)
    assert isinstance(comment_out["updatedAt"], str)
    assert isinstance(comment_out["author"], dict)
    assert comment_out["author"]["username"] == "bob"
    # Ensure following flag from profiles serializer helper propagated to rendered output
    assert comment_out["author"]["following"] is True


@pytest.mark.parametrize("initial_slug,expect_saved,expect_slug_contains", [
    (None, True, "my-title-XYZ"),
    ("already-there", False, "already-there"),
])
def test_add_slug_to_article_if_not_exists_sets_slug_and_saves_when_missing(monkeypatch, initial_slug, expect_saved, expect_slug_contains):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # Create a fake article instance that mimics the model instance expected by the signal handler.
    class FakeArticle:
        def __init__(self, slug):
            self.slug = slug
            self.title = "My Title"
            self._saved = False

        def save(self, *args, **kwargs):
            # Mark that save was called so we can assert on state change
            self._saved = True

    article = FakeArticle(initial_slug)

    # Monkeypatch utilities used by the signal for deterministic behavior
    monkeypatch.setattr(articles_signals, "slugify", lambda s: "my-title")
    # Ensure generate_random_string used in slug is deterministic
    # The signals module might import generate_random_string from conduit.apps.core.utils under a different name;
    # safely monkeypatch the attribute on the module if present.
    if hasattr(articles_signals, "generate_random_string"):
        monkeypatch.setattr(articles_signals, "generate_random_string", lambda: "XYZ")
    else:
        # Try to set the generate_random_string on the module that signals imports from, if present
        try:
            import conduit.apps.core.utils as core_utils  # type: ignore
            monkeypatch.setattr(core_utils, "generate_random_string", lambda: "XYZ")
        except Exception:
            # If neither is present, continue; slug will still be deterministic due to slugify patch above
            pass

    # Act
    # Call the signal handler as a receiver typically would be called
    articles_signals.add_slug_to_article_if_not_exists(sender=None, instance=article, created=False)

    # Assert
    if expect_saved:
        assert article._saved is True
        assert article.slug is not None
        # slug should include slugified title and our deterministic random segment
        assert expect_slug_contains in article.slug
    else:
        assert article._saved is False
        assert article.slug == "already-there"
