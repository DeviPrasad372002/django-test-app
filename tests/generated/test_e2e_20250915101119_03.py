import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import pytest
    from types import SimpleNamespace

    from conduit.apps.authentication import models as auth_models
    from conduit.apps.authentication.models import User
    from conduit.apps.authentication.renderers import UserJSONRenderer
    from conduit.apps.core.utils import generate_random_string
except ImportError:
    import pytest
    pytest.skip("Required third-party modules (Django/DRF or project modules) are not available", allow_module_level=True)


def test_get_short_name_and__generate_jwt_token_calls_jwt_with_expected_payload(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    user = User()
    # ensure the attributes used by the methods exist
    user.username = "alice"
    user.email = "alice@example.test"
    user.id = 42

    recorded = {}

    def fake_encode(payload, secret=None, algorithm=None):
        # capture the payload and return a deterministic token string
        recorded['payload'] = payload
        recorded['secret'] = secret
        recorded['algorithm'] = algorithm
        return "signed-token-42"

    # Replace the jwt.encode used inside the module with our fake
    # auth_models imports jwt (import jwt) so we replace encode on that module object
    monkeypatch.setattr(auth_models.jwt, "encode", fake_encode, raising=True)

    # Act
    # get_short_name should return the username we set
    short = user.get_short_name()
    token = user._generate_jwt_token()

    # Assert
    assert isinstance(short, str)
    assert short == "alice"  # concrete expectation: returns the username
    assert token == "signed-token-42"

    # the payload passed to jwt.encode should include the user id and an expiration
    assert 'payload' in recorded
    payload = recorded['payload']
    assert isinstance(payload, dict)
    assert payload.get('id') == 42
    assert 'exp' in payload
    # exp should be an int timestamp (or at least numeric)
    assert isinstance(payload['exp'], int)


def test_userjsonrenderer_renders_user_dict_to_json_bytes():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    renderer = UserJSONRenderer()
    user_data = {
        "user": {
            "email": "bob@example.test",
            "username": "bob",
            "bio": None,
            "image": None,
            "token": "tok-xyz"
        }
    }

    # Act
    rendered = renderer.render(user_data, accepted_media_type=None, renderer_context=None)

    # Assert
    assert isinstance(rendered, (bytes, bytearray))
    rendered_text = rendered.decode("utf-8")
    # Concrete checks for expected keys and values in output
    assert '"user"' in rendered_text
    assert '"email"' in rendered_text
    assert '"username"' in rendered_text
    assert "bob@example.test" in rendered_text
    assert "tok-xyz" in rendered_text


@pytest.mark.parametrize(
    "length, expected",
    [
        (0, ""),
        (5, "zzzzz"),
    ],
)
def test_generate_random_string_deterministic_with_monkeypatched_random_choice(monkeypatch, length, expected):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    import random as _random

    # Make random.choice deterministic: always pick 'z'
    monkeypatch.setattr(_random, "choice", lambda seq: "z")

    # Act
    result = generate_random_string(length)

    # Assert
    assert isinstance(result, str)
    assert result == expected


def test_generate_random_string_raises_on_invalid_type():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange / Act / Assert
    with pytest.raises(TypeError):
        generate_random_string("not-an-integer")
