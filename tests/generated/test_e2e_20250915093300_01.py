import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import pytest
    from conduit.apps.articles.signals import add_slug_to_article_if_not_exists
    from conduit.apps.core.exceptions import _handle_generic_error
    from conduit.apps.articles.relations import TagRelatedField
    from rest_framework.exceptions import ValidationError
except ImportError:
    import pytest
    pytest.skip("Required third-party or target package imports not available", allow_module_level=True)


def test_add_slug_to_article_if_not_exists_assigns_slug_when_missing():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    class DummyArticle:
        def __init__(self, title, slug=None):
            self.title = title
            self.slug = slug

    article = DummyArticle(title="How to Train Your Dragon", slug=None)

    # Act
    # simulate signal call signature: sender and instance (other kwargs ignored)
    add_slug_to_article_if_not_exists(sender=None, instance=article)

    # Assert
    assert isinstance(article.slug, str), "slug should be set to a string"
    # slug should contain slugified form of the title (lowercase, hyphens)
    assert "how-to-train-your-dragon" in article.slug
    # ensure there is some suffix (e.g. dash + random string) and no spaces
    assert "-" in article.slug
    assert " " not in article.slug


@pytest.mark.parametrize(
    "input_exc, expected_status_min, expected_message_fragment",
    [
        (ValueError("boom"), 400, "boom"),
        (Exception("something went wrong"), 400, "something went wrong"),
    ],
)
def test_handle_generic_error_wraps_exception_into_response(input_exc, expected_status_min, expected_message_fragment):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange done via parametrization

    # Act
    resp = _handle_generic_error(input_exc)

    # Assert
    # Response object from DRF should expose status_code and data
    assert hasattr(resp, "status_code"), "response should have status_code attribute"
    assert isinstance(resp.status_code, int)
    assert resp.status_code >= expected_status_min
    assert hasattr(resp, "data"), "response should have data attribute"
    # data should contain an 'errors' key and include the message text
    data_str = str(resp.data)
    assert "errors" in data_str.lower()
    assert expected_message_fragment in data_str


@pytest.mark.parametrize(
    "input_value, should_raise",
    [
        ("python", False),
        (None, True),
        (123, False),  # numeric should typically be coerced/accepted as to_internal_value in many simple fields
    ],
)
def test_tagrelatedfield_to_internal_value_and_representation(input_value, should_raise):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # Try to construct TagRelatedField with or without queryset argument depending on signature
    try:
        field = TagRelatedField(queryset=None)
    except TypeError:
        field = TagRelatedField()

    # Act / Assert for to_internal_value
    if should_raise:
        with pytest.raises(ValidationError):
            field.to_internal_value(input_value)
    else:
        internal = field.to_internal_value(input_value)
        # to_internal_value should return a concrete type (string or the same input)
        assert internal is not None
        # if input is not a string, ensure representation eventually converts via to_representation
        # Arrange a dummy tag-like object for to_representation
        class DummyTag:
            def __init__(self, name):
                self.name = name

        dummy = DummyTag(name=str(internal))
        rep = field.to_representation(dummy)
        assert isinstance(rep, str)
        assert rep == str(internal)
