import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import json
    import pytest
    from types import SimpleNamespace
    from conduit.apps.core import utils as core_utils
    from conduit.apps.authentication import models as auth_models
    from conduit.apps.authentication.renderers import UserJSONRenderer
except ImportError:
    import pytest
    pytest.skip("Skipping tests because required modules are not available", allow_module_level=True)


@pytest.mark.parametrize("length, expected_char", [
    (0, ""),    # edge: zero-length
    (1, "X"),   # normal: single char
    (5, "X"),   # normal: multiple chars
])
def test_generate_random_string_deterministic(monkeypatch, length, expected_char):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange: force random.choice used inside generate_random_string to be deterministic
    called = {"count": 0}

    def fake_choice(seq):
        called["count"] += 1
        return "X"

    # patch the random.choice used inside the utility module
    monkeypatch.setattr(core_utils.random, "choice", fake_choice)

    # Act
    result = core_utils.generate_random_string(length)

    # Assert: length matches and characters are the forced value
    assert isinstance(result, str), "Result should be a string"
    assert len(result) == length, "Result length should match requested length"
    if length > 0:
        assert result == expected_char * length
        assert called["count"] == length
    else:
        assert result == ""


def test_user_token_uses_jwt_and_propagates_errors(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange: prepare a User instance without touching the DB
    user = auth_models.User()
    user.pk = 42  # set primary key used in token payload

    encode_calls = []

    def fake_encode(payload, secret, algorithm="HS256"):
        # record the call and return a bytes token to emulate jwt.encode behavior
        encode_calls.append({"payload": payload, "secret": secret, "algorithm": algorithm})
        return b"fixed-token-bytes"

    # Patch the jwt.encode used inside the authentication models
    monkeypatch.setattr(auth_models.jwt, "encode", fake_encode)

    # Act: access the token property which should call jwt.encode
    token = user.token

    # Assert: token returned is a string decoded from bytes and jwt.encode was called with expected payload
    assert isinstance(token, str)
    assert token == "fixed-token-bytes"
    assert len(encode_calls) == 1
    payload = encode_calls[0]["payload"]
    # payload should include the user's id (use either 'id' or 'user_id' depending on implementation)
    assert any(payload.get(k) == 42 for k in ("id", "user_id")), "Token payload must include user id"

    # Now assert that if jwt.encode raises, the error propagates
    def raise_encode(*args, **kwargs):
        raise RuntimeError("jwt encode failure")

    monkeypatch.setattr(auth_models.jwt, "encode", raise_encode)

    with pytest.raises(RuntimeError):
        _ = user.token


def test_userjsonrenderer_wraps_input_under_user_key():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange: a renderer and sample data representing a serialized user
    renderer = UserJSONRenderer()
    sample = {"email": "alice@example.com", "token": "tok", "username": "alice"}

    # Act: render should produce JSON bytes
    output = renderer.render(sample)

    # Assert: output is bytes or str JSON which, when parsed, has the expected structure
    assert isinstance(output, (bytes, str)), "Renderer should return bytes or string"
    decoded = output.decode("utf-8") if isinstance(output, bytes) else output
    parsed = json.loads(decoded)
    assert isinstance(parsed, dict)
    # The renderer is expected to nest the provided data under the "user" key
    assert "user" in parsed
    assert parsed["user"] == sample
