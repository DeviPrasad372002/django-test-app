import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import pytest
    import json
    from types import SimpleNamespace
    from unittest.mock import Mock
    import jwt
    from rest_framework.exceptions import AuthenticationFailed
    from conduit.apps.authentication.backends import JWTAuthentication
    from conduit.apps.authentication.models import User
    from conduit.apps.authentication.renderers import UserJSONRenderer
    from conduit.apps.authentication.serializers import UserSerializer
except ImportError:
    import pytest
    pytest.skip("skipping tests: required packages not installed", allow_module_level=True)


@pytest.mark.parametrize("is_active, expect_exception", [
    (True, False),
    (False, True),
])
def test_jwt_authenticate_credentials_success_and_inactive_user(monkeypatch, is_active, expect_exception):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    fake_token = "header.payload.signature"
    fake_payload = {"user_id": 99}

    # jwt.decode normally requires token, secret and algorithms; monkeypatch to return payload
    monkeypatch.setattr(jwt, "decode", lambda token, key=None, algorithms=None: fake_payload)

    # Create a fake user object to be returned by User.objects.get
    fake_user = SimpleNamespace(id=99, is_active=is_active)

    class DummyManager:
        def get(self, pk):
            # simulate querying by primary key; ignore pk value passed by code under test
            return fake_user

    # Attach dummy manager to the User class to avoid DB access
    monkeypatch.setattr(User, "objects", DummyManager())

    backend = JWTAuthentication()

    # Act / Assert
    if expect_exception:
        with pytest.raises(AuthenticationFailed):
            # Arrange-Act: call the internal credentials method which should enforce active user
            backend._authenticate_credentials(fake_token)
    else:
        # Arrange-Act: expect a tuple (user, token) on success
        user, token = backend._authenticate_credentials(fake_token)
        # Assert
        assert user is fake_user
        assert token == fake_token


def test_jwt_authenticate_raises_on_decode_error(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    bad_token = "bad.token"
    # Simulate jwt.decode raising an unexpected error (e.g., invalid token)
    monkeypatch.setattr(jwt, "decode", Mock(side_effect=Exception("invalid token")))

    backend = JWTAuthentication()

    # Act / Assert: any decode error should be translated into AuthenticationFailed
    with pytest.raises(AuthenticationFailed):
        backend._authenticate_credentials(bad_token)


@pytest.mark.parametrize("token_value,image,expected_image", [
    ("tok123", None, None),
    ("tok456", "http://img", "http://img"),
])
def test_user_serializer_includes_token_and_image(monkeypatch, token_value, image, expected_image):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # Build a lightweight object that mimics the attributes the serializer expects.
    fake_user = SimpleNamespace(username="alice", email="alice@example.com", bio="hello", image=image)
    # The serializer expects a 'token' attribute; provide it directly to avoid hitting model internals.
    setattr(fake_user, "token", token_value)

    # Act
    data = UserSerializer(fake_user).data

    # Assert
    assert isinstance(data, dict)
    assert data["username"] == "alice"
    assert data["email"] == "alice@example.com"
    assert data.get("bio") == "hello"
    assert data.get("image") == expected_image
    assert data["token"] == token_value


@pytest.mark.parametrize("payload, expect_exception", [
    ({"user": {"email": "x@example.com"}}, False),           # normal case
    ({"notuser": {"foo": "bar"}}, False),                    # different key preserved
    ({"user": set([1, 2, 3])}, True),                        # non-serializable value should raise
])
def test_userjsonrenderer_renders_payloads_and_handles_errors(payload, expect_exception):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    renderer = UserJSONRenderer()

    # Act / Assert
    if expect_exception:
        with pytest.raises(TypeError):
            renderer.render(payload)
    else:
        rendered = renderer.render(payload)
        # Assert: renderer returns bytes and JSON decodes to original structure
        assert isinstance(rendered, (bytes, bytearray))
        decoded = json.loads(rendered.decode())
        assert decoded == payload
