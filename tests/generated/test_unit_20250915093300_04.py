import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import types
    import sys
    import pytest

    from conduit.apps.articles import ArticlesAppConfig
    from conduit.apps.articles.models import Tag, Article
    from conduit.apps.articles.relations import TagRelatedField
    from conduit.apps.articles.signals import add_slug_to_article_if_not_exists
except ImportError:
    import pytest  # noqa: F401
    pytest.skip("Django or project modules not available, skipping tests", allow_module_level=True)


def test_articles_appconfig_ready_imports_signals(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange: ensure a controlled fake signals module is present so ready() imports it
    fake_name = "conduit.apps.articles.signals"
    fake_module = types.ModuleType(fake_name)
    # Place an attribute we can check presence of (not strictly necessary but helpful)
    fake_module.MARKER = "imported-by-ready"
    monkeypatch.setitem(sys.modules, fake_name, fake_module)

    app_config = ArticlesAppConfig("conduit.apps.articles", "conduit.apps.articles")

    # Act: call ready which should import the signals module (our fake module)
    app_config.ready()

    # Assert: the signals module that ready attempted to import is present and our marker exists
    assert fake_name in sys.modules
    assert getattr(sys.modules[fake_name], "MARKER") == "imported-by-ready"


def test_tag_str_and_tagrelatedfield_to_representation_and_internal_value(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange: create an in-memory Tag instance and a TagRelatedField
    tag = Tag(name="python")
    field = TagRelatedField()

    # Act & Assert (to_representation): ensure string representation and field representation include name
    repr_value = field.to_representation(tag)
    assert isinstance(repr_value, str)
    assert "python" in repr_value

    # Arrange (internal value): monkeypatch Tag.objects.get_or_create to simulate DB behavior
    class DummyManager:
        def __init__(self):
            self.called_with = None
            self.return_created = True

        def get_or_create(self, name):
            self.called_with = name
            return tag, self.return_created

    manager = DummyManager()
    # Replace the objects manager on Tag with our dummy manager
    monkeypatch.setattr(Tag, "objects", manager, raising=False)

    # Act: convert incoming primitive to internal Tag instance
    internal = field.to_internal_value("python")

    # Assert: we got back the Tag instance and the manager was called with expected arg
    assert internal is tag
    assert manager.called_with == "python"


@pytest.mark.parametrize("created_flag", [True, False])
def test_tagrelatedfield_to_internal_value_handles_existing_and_new(monkeypatch, created_flag):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange: prepare a Tag instance and a dummy manager that toggles created flag
    tag = Tag(name="pytest")
    calls = []

    def fake_get_or_create(name):
        calls.append(name)
        return tag, created_flag

    dummy_manager = types.SimpleNamespace(get_or_create=fake_get_or_create)
    monkeypatch.setattr(Tag, "objects", dummy_manager, raising=False)
    field = TagRelatedField()

    # Act: call to_internal_value which should invoke get_or_create on Tag.objects
    result = field.to_internal_value("pytest")

    # Assert: result is our tag and get_or_create was called exactly once with expected parameter
    assert result is tag
    assert calls == ["pytest"]


def test_add_slug_to_article_if_not_exists_creates_slug_from_title():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange: create an Article instance lacking a slug
    article = Article(title="Hello World: Testing Slug!", slug=None)

    # Precondition: no slug set
    assert not getattr(article, "slug", None)

    # Act: simulate Django post_save signal call
    # The signal handler signature is typically (sender, instance, created, **kwargs)
    add_slug_to_article_if_not_exists(sender=Article, instance=article, created=True)

    # Assert: a slug was created on the instance and it is a non-empty string containing a slugified fragment
    assert getattr(article, "slug", None), "slug should be set by signal handler"
    assert "hello-world" in article.slug or "hello-world-testing-slug" in article.slug or "-" in article.slug
