import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.exists(_target):
    if _target not in sys.path: sys.path.insert(0, _target)
    try: os.chdir(_target)
    except Exception: pass

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

def _apply_compatibility_fixes():
    try:
        import jinja2
        if not hasattr(jinja2, 'Markup'):
            try:
                from markupsafe import Markup, escape
                jinja2.Markup = Markup
                if not hasattr(jinja2, 'escape'):
                    jinja2.escape = escape
            except Exception:
                pass
    except ImportError:
        pass
    try:
        import collections as _collections, collections.abc as _abc
        for _n in ('Mapping','MutableMapping','Sequence','Iterable','Container',
                   'MutableSequence','Set','MutableSet','Iterator','Generator','Callable','Collection'):
            if not hasattr(_collections, _n) and hasattr(_abc, _n):
                setattr(_collections, _n, getattr(_abc, _n))
    except Exception:
        pass
    try:
        import marshmallow as _mm
        if not hasattr(_mm, "__version__"):
            _mm.__version__ = "4"
    except Exception:
        pass

_apply_compatibility_fixes()

# Minimal, safe Django bootstrap. If anything goes wrong, skip the module (repo-agnostic).
try:
    import django
    from django.conf import settings as _dj_settings
    from django import apps as _dj_apps

    if not _dj_settings.configured:
        _cfg = dict(
            DEBUG=True,
            SECRET_KEY='pytest-secret',
            DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
            INSTALLED_APPS=[
                'django.contrib.auth','django.contrib.contenttypes',
                'django.contrib.sessions','django.contrib.messages'
            ],
            MIDDLEWARE=[
                'django.middleware.security.SecurityMiddleware',
                'django.contrib.sessions.middleware.SessionMiddleware',
                'django.middleware.common.CommonMiddleware',
            ],
            USE_TZ=True, TIME_ZONE='UTC',
        )
        try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
        except Exception: pass
        try: _dj_settings.configure(**_cfg)
        except Exception: pass

    if not _dj_apps.ready:
        try: django.setup()
        except Exception: pass

    # Probe a known Django core that previously crashed on some stacks.
    try:
        import django.contrib.auth.base_user as _dj_probe  # noqa
    except Exception as _e:
        _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
except Exception as _e:
    # Do NOT crash the entire test session â€“ make the module opt-out.
    _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)


# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import pytest
    from conduit.apps.articles.signals import add_slug_to_article_if_not_exists
    from conduit.apps.articles.models import Article
    from django.utils.text import slugify
    from unittest.mock import Mock
except ImportError:
    import pytest
    pytest.skip("Skipping tests because required modules are not available", allow_module_level=True)


@pytest.mark.parametrize(
    "title",
    [
        "Hello World",               # normal title
        "Complex! Title, With---Punc",  # punctuation and repeated separators
        "",                          # edge: empty title
    ],
)
def test_add_slug_sets_slug_and_calls_save_for_various_titles(title):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    class DummyArticle:
        def __init__(self, title, slug=None):
            self.title = title
            self.slug = slug
            self._saved = False

        def save(self, *args, **kwargs):
            # mark that save was called
            self._saved = True

    instance = DummyArticle(title=title, slug=None)

    # Act
    add_slug_to_article_if_not_exists(sender=None, instance=instance, created=True)

    # Assert
    # slug must be a non-empty string
    assert isinstance(instance.slug, str)
    assert instance.slug != ""
    # If slugify of the title is non-empty, the generated slug should start with that slugified prefix
    slugified = slugify(title)
    if slugified:
        assert instance.slug.startswith(slugified)
    # save must have been called because slug was absent and created=True
    assert getattr(instance, "_saved", False) is True


def test_add_slug_does_not_override_existing_slug_and_does_not_call_save():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    saved_flag = {"called": False}

    class DummyArticle:
        def __init__(self, title, slug=None):
            self.title = title
            self.slug = slug

        def save(self, *args, **kwargs):
            saved_flag["called"] = True

    existing = "already-exists-slug"
    instance = DummyArticle(title="Any", slug=existing)

    # Act
    add_slug_to_article_if_not_exists(sender=None, instance=instance, created=True)

    # Assert
    # slug must remain unchanged and save must not be called
    assert instance.slug == existing
    assert saved_flag["called"] is False


@pytest.mark.parametrize(
    "title,expected_str",
    [
        ("My Article Title", "My Article Title"),  # normal title
        ("", ""),                                   # boundary: empty title -> expect empty string
    ],
)
def test_article___str___returns_title_for_normal_and_empty(title, expected_str):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # Create Article instance without hitting database by constructing the model object
    article = Article(title=title)

    # Act
    stringified = str(article)

    # Assert
    assert isinstance(stringified, _exc_lookup("str", Exception))
    assert stringified == expected_str
