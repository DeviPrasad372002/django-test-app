import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import pytest
    import json
    import string as _string

    from conduit.apps.core.utils import generate_random_string
    from conduit.apps.authentication.renderers import UserJSONRenderer
    from conduit.apps.authentication.backends import JWTAuthentication
    from rest_framework.exceptions import AuthenticationFailed
except ImportError:
    import pytest
    pytest.skip("Required third-party or project imports are not available", allow_module_level=True)


@pytest.mark.parametrize("length", [10, 1, 0])
def test_generate_random_string_length_and_charset(length):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    allowed = set(_string.ascii_letters + _string.digits)

    # Act
    result = generate_random_string(length)

    # Assert
    assert isinstance(result, str), "Expected a string"
    assert len(result) == length, "String length should match requested length"
    # Each character must be in allowed charset (if length > 0)
    for ch in result:
        assert ch in allowed, f"Character {ch!r} not in allowed charset"


@pytest.mark.parametrize("input_data, expected_user_value", [
    ({"email": "alice@example.com", "token": "tok"}, {"email": "alice@example.com", "token": "tok"}),
    (None, None),
    ({}, {}),
])
def test_user_json_renderer_wraps_data_under_user_key(input_data, expected_user_value):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    renderer = UserJSONRenderer()

    # Act
    raw = renderer.render(input_data)

    # Assert - bytes output that decodes to JSON with a top-level "user" key
    assert isinstance(raw, (bytes, bytearray)), "Renderer should return bytes"
    decoded = json.loads(raw.decode("utf-8"))
    assert "user" in decoded, "Rendered JSON must contain 'user' key"
    assert decoded["user"] == expected_user_value


@pytest.mark.parametrize("bad_token", ["not.a.token", "", None])
def test_jwt_authentication_raises_on_invalid_token(bad_token):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    backend = JWTAuthentication()

    # Act / Assert
    # The authentication backend should raise AuthenticationFailed for malformed/invalid tokens
    with pytest.raises(AuthenticationFailed):
        # Call the internal credentials checker directly with bad input
        # This mirrors how the public API would validate a token provided in a request
        backend._authenticate_credentials(bad_token)
