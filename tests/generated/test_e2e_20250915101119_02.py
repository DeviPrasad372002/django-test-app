import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import pytest
    from conduit.apps.authentication import models as auth_models
    User = auth_models.User
    UserManager = auth_models.UserManager
    import jwt
    from django.conf import settings
except ImportError as e:
    import pytest
    pytest.skip(f"skipping tests due to missing dependency: {e}", allow_module_level=True)


def test_user_get_full_name_short_name_and_token_structure():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    user = User()
    user.email = "TEST@Example.COM"
    user.username = "tester"
    user.first_name = "First"
    user.last_name = "Last"

    # Act
    full_name = user.get_full_name()
    short_name = user.get_short_name()
    token = getattr(user, "token", None)

    # Assert
    assert isinstance(full_name, str) and full_name == "First Last"
    assert isinstance(short_name, str) and short_name == "tester"
    assert isinstance(token, str)

    # Act - Attempt to decode the token to validate structure/payload if possible
    try:
        payload = jwt.decode(token, settings.SECRET_KEY, algorithms=["HS256"])
    except Exception:
        # Assert - fallback structural check if decoding not possible in this environment
        assert token.count(".") == 2
    else:
        # Assert - payload should be a dict and contain at least one expected identifier
        assert isinstance(payload, dict)
        assert any(k in payload for k in ("id", "user_id", "email"))


@pytest.mark.parametrize(
    "email,username,password,expect_error",
    [
        ("user@example.com", "user123", "s3cret", None),  # normal case
        ("", "missing_email", "pwd", ValueError),  # error path: missing email
    ],
)
def test_user_manager_create_user_variants(email, username, password, expect_error):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    manager = UserManager()
    manager.model = User

    # Act / Assert
    if expect_error:
        with pytest.raises(expect_error):
            manager.create_user(email=email, username=username, password=password)
        return

    # Act - create normal user
    user = manager.create_user(email=email, username=username, password=password)

    # Assert - returned object type and normalized email
    assert isinstance(user, User)
    assert user.email == email.lower()

    # Assert - password was set (check_password available on AbstractBaseUser)
    check = getattr(user, "check_password", None)
    assert callable(check) and check(password) is True

    # Assert - default privilege flags for regular user
    assert getattr(user, "is_staff", False) is False
    assert getattr(user, "is_superuser", False) is False

    # Act - create superuser and validate elevated flags
    superuser = manager.create_superuser(email="admin@example.com", username="admin", password="adminpass")

    # Assert - superuser properties
    assert isinstance(superuser, User)
    assert superuser.email == "admin@example.com"
    assert getattr(superuser, "is_staff", False) is True
    assert getattr(superuser, "is_superuser", False) is True
