import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

import os, sys, types as _types, pytest as _pytest, warnings
warnings.filterwarnings('ignore', category=DeprecationWarning)
warnings.filterwarnings('ignore', category=PendingDeprecationWarning)
_t = os.environ.get('TARGET_ROOT') or 'target'
if _t and os.path.isdir(_t):
    _p = os.path.abspath(os.path.join(_t, os.pardir))
    [sys.path.insert(0, p) for p in (_p,_t) if p not in sys.path]
    _pkg=_types.ModuleType('target'); _pkg.__path__=[_t]; sys.modules.setdefault('target', _pkg)

try:
    import pytest
    import string
    from conduit.apps.core.utils import generate_random_string
    from conduit.apps.profiles.serializers import get_image, get_following
    from conduit.apps.articles import ArticlesAppConfig
except ImportError:
    import pytest
    pytest.skip("Required project modules not available", allow_module_level=True)


@pytest.mark.parametrize("length", [8, 1])
def test_generate_random_string_returns_string_of_requested_length_and_charset(length):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # Act
    result = generate_random_string(length)
    # Assert
    assert isinstance(result, str)
    assert len(result) == length
    allowed = set(string.ascii_letters + string.digits)
    assert all(ch in allowed for ch in result)


def test_generate_random_string_invalid_type_raises_type_error():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    invalid_input = "not-an-int"
    # Act / Assert
    with pytest.raises(TypeError):
        generate_random_string(invalid_input)


@pytest.mark.parametrize(
    "image_value, expected",
    [
        ("http://example.com/img.png", "http://example.com/img.png"),  # normal
        (None, ""),  # missing image -> empty string expected
    ],
)
def test_get_image_handles_present_and_missing(image_value, expected):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    class Dummy:
        pass

    dummy = Dummy()
    setattr(dummy, "image", image_value)
    # Act
    result = get_image(dummy)
    # Assert
    assert isinstance(result, str)
    assert result == expected


@pytest.mark.parametrize(
    "has_attr, attr_value, expected",
    [
        (True, True, True),    # is_following present True
        (True, False, False),  # is_following present False
        (False, None, False),  # attribute missing -> False
    ],
)
def test_get_following_returns_boolean_for_various_profile_states(has_attr, attr_value, expected):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    class Dummy:
        pass

    dummy = Dummy()
    if has_attr:
        setattr(dummy, "is_following", attr_value)
    # Act
    result = get_following(dummy)
    # Assert
    assert isinstance(result, bool)
    assert result is expected


def test_articles_app_config_has_expected_name_attribute():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange / Act
    # Access the class attribute directly
    name = ArticlesAppConfig.name
    # Assert
    assert isinstance(name, str)
    assert "articles" in name
    assert name.endswith("articles")
