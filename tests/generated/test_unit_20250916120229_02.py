import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

import os, sys, types as _types, pytest as _pytest, warnings
warnings.filterwarnings('ignore', category=DeprecationWarning)
warnings.filterwarnings('ignore', category=PendingDeprecationWarning)
_t = os.environ.get('TARGET_ROOT') or 'target'
if _t and os.path.isdir(_t):
    _p = os.path.abspath(os.path.join(_t, os.pardir))
    [sys.path.insert(0, p) for p in (_p,_t) if p not in sys.path]
    _pkg=_types.ModuleType('target'); _pkg.__path__=[_t]; sys.modules.setdefault('target', _pkg)

try:
    import json
    import string
    import pytest

    from target.conduit.apps.core.utils import generate_random_string
    from target.conduit.apps.articles.renderers import ArticleJSONRenderer
    from target.conduit.apps.authentication.backends import JWTAuthentication
except ImportError:
    import pytest
    pytest.skip("Required third-party or project modules not available", allow_module_level=True)


@pytest.mark.parametrize("length", [8, 1, 0])
def test_generate_random_string_length_and_charset(length):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    allowed = set(string.ascii_letters + string.digits)

    # Act
    result = generate_random_string(length)

    # Assert
    assert isinstance(result, str)
    assert len(result) == length
    assert all(ch in allowed for ch in result)


def test_generate_random_string_uniqueness_and_different_lengths():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    length_a = 12
    length_b = 6

    # Act
    a = generate_random_string(length_a)
    b = generate_random_string(length_a)
    c = generate_random_string(length_b)

    # Assert
    assert isinstance(a, str) and isinstance(b, str) and isinstance(c, str)
    assert len(a) == length_a and len(c) == length_b
    # Very low probability they are equal; assert they are not identical to catch obvious non-random impls
    assert a != b
    assert a != c


def test_article_json_renderer_wraps_article_key():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    renderer = ArticleJSONRenderer()
    payload = {"title": "Test Title", "body": "Test Body"}

    # Act
    rendered = renderer.render(payload, accepted_media_type=None, renderer_context=None)

    # Assert
    # renderer may return bytes or str
    assert isinstance(rendered, (bytes, str))
    decoded = rendered.decode("utf-8") if isinstance(rendered, bytes) else rendered
    parsed = json.loads(decoded)
    # Expect top-level "article" key wrapping the payload (common convention)
    assert isinstance(parsed, dict)
    assert "article" in parsed
    assert parsed["article"] == payload


def test_jwt_authentication_returns_none_when_no_header():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    auth = JWTAuthentication()

    class DummyRequest:
        META = {}
        # some implementations reference .headers
        headers = {}

    request = DummyRequest()

    # Act
    result = auth.authenticate(request)

    # Assert
    # When no Authorization header present, authenticate should return None (no credentials provided)
    assert result is None
