import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import json
    import inspect
    import string
    import pytest
    from conduit.apps.core.utils import generate_random_string
    from conduit.apps.authentication.renderers import UserJSONRenderer
    from conduit.apps.authentication import models as auth_models
    # _generate_jwt_token may be a module function or attribute on models module
    _generate_jwt_token = getattr(auth_models, "_generate_jwt_token", None)
    # jwt is a third-party dependency; ensure availability
    import jwt
except ImportError:
    import pytest
    pytest.skip("Skipping tests - required modules not available", allow_module_level=True)


@pytest.mark.parametrize("length", [0, 8, 32])
def test_generate_random_string_returns_alphanumeric_of_expected_length(length):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # lengths parametrized above

    # Act
    result = generate_random_string(length)

    # Assert
    assert isinstance(result, str), "generate_random_string should return a str"
    assert len(result) == length, "Returned string must have requested length"
    # empty string is acceptable for length==0
    if length == 0:
        assert result == ""
    else:
        # ensure alphanumeric characters only for safety (most implementations use letters/digits)
        assert result.isalnum(), "Returned string should be alphanumeric"


def test_generate_random_string_is_probably_random_for_nonzero_length():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    length = 8

    # Act
    a = generate_random_string(length)
    b = generate_random_string(length)

    # Assert
    assert isinstance(a, str) and isinstance(b, str)
    assert len(a) == len(b) == length
    # Very small chance of collision; this asserts probable randomness
    assert a != b, "Two successive calls should usually produce different strings"


def test_user_renderer_wraps_user_and_jwt_generation_integration(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Skip the test early if the token generator isn't available
    if _generate_jwt_token is None:
        pytest.skip("Skipping because _generate_jwt_token is not present in auth models")

    # Arrange
    # Build a dummy user-like object that the token generator can inspect if needed
    DummyUser = type("DummyUser", (), {"id": 123, "pk": 123, "username": "alice", "email": "alice@example.com"})
    dummy = DummyUser()

    # Prepare a predictable token returned by jwt.encode by monkeypatching it
    def fake_jwt_encode(payload, key=None, algorithm=None):
        # Basic sanity checks to ensure the payload contains an id or exp perhaps
        assert isinstance(payload, dict), "jwt payload should be a dict"
        return "mocked.jwt.token"
    monkeypatch.setattr(jwt, "encode", fake_jwt_encode)

    # Act
    # Call the token generator robustly regardless of whether it expects arguments
    sig = inspect.signature(_generate_jwt_token)
    if len(sig.parameters) == 0:
        token = _generate_jwt_token()
    else:
        token = _generate_jwt_token(dummy)

    # Assert token type and value come from our fake_jwt_encode
    assert token == "mocked.jwt.token", "Token should come from patched jwt.encode"

    # Now integrate with the UserJSONRenderer
    renderer = UserJSONRenderer()
    user_payload = {"email": dummy.email, "username": dummy.username, "token": token}

    # Act: render the payload
    rendered = renderer.render(user_payload, accepted_media_type=None, renderer_context=None)

    # Assert
    # renderer may return bytes or str depending on implementation
    assert isinstance(rendered, (bytes, str)), "Renderer should return bytes or str"
    if isinstance(rendered, bytes):
        rendered_text = rendered.decode("utf-8")
    else:
        rendered_text = rendered

    parsed = json.loads(rendered_text)
    # Expect the renderer to wrap under "user" key per common convention
    assert "user" in parsed, "Rendered JSON should contain top-level 'user' key"
    assert parsed["user"]["email"] == dummy.email
    assert parsed["user"]["token"] == "mocked.jwt.token"


def test_generate_jwt_token_propagates_errors_from_jwt_encode(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Skip if token generator not available
    if _generate_jwt_token is None:
        pytest.skip("Skipping because _generate_jwt_token is not present in auth models")

    # Arrange
    DummyUser = type("DummyUser", (), {"id": 1, "username": "bob", "email": "bob@example.com"})
    dummy = DummyUser()

    # Make jwt.encode raise an error to test error propagation / handling
    def raising_encode(payload, key=None, algorithm=None):
        raise ValueError("encoding failure")
    monkeypatch.setattr(jwt, "encode", raising_encode)

    # Act / Assert
    sig = inspect.signature(_generate_jwt_token)
    if len(sig.parameters) == 0:
        callable_obj = lambda: _generate_jwt_token()
    else:
        callable_obj = lambda: _generate_jwt_token(dummy)

    with pytest.raises(ValueError):
        # Expect the ValueError from jwt.encode to propagate (integration behaviour)
        callable_obj()
