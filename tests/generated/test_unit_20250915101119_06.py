import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import pytest
    from conduit.apps.authentication.renderers import UserJSONRenderer
    from conduit.apps.authentication.backends import JWTAuthentication
    from conduit.apps.authentication import AuthenticationAppConfig
    from rest_framework.exceptions import AuthenticationFailed
except ImportError:
    import pytest
    pytest.skip("Skipping tests because required modules are not available", allow_module_level=True)


class DummyRequest:
    def __init__(self, auth_header=None):
        # Arrange: simple stand-in for DRF request with META containing HTTP_AUTHORIZATION
        self.META = {}
        if auth_header is not None:
            self.META["HTTP_AUTHORIZATION"] = auth_header


def test_user_json_renderer_renders_user_wrapper_bytes():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    renderer = UserJSONRenderer()
    payload = {"user": {"email": "alice@example.com", "token": "sometoken"}}

    # Act
    output = renderer.render(payload)

    # Assert
    assert isinstance(output, (bytes, bytearray)), "Renderer must return bytes"
    text = output.decode("utf-8")
    assert '"user"' in text and "alice@example.com" in text and "sometoken" in text


@pytest.mark.parametrize("input_data", [None, "plain-string", b"\x00\x01"])
def test_user_json_renderer_handles_various_input_types(input_data):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    renderer = UserJSONRenderer()

    # Act
    output = renderer.render(input_data)

    # Assert
    assert isinstance(output, (bytes, bytearray)), "Renderer should always produce bytes for outputs"
    # Ensure it does not return empty bytes for typical inputs (edge: None may result in b'null')
    assert len(output) >= 0


def test_authentication_app_config_exposes_ready_callable():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange & Act
    ready_attr = getattr(AuthenticationAppConfig, "ready", None)

    # Assert
    assert ready_attr is not None, "AppConfig should define a ready method"
    assert callable(ready_attr), "ready attribute must be callable"


def test_jwt_authentication_returns_none_when_no_authorization_header():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    auth = JWTAuthentication()
    request = DummyRequest(auth_header=None)

    # Act
    result = auth.authenticate(request)

    # Assert
    assert result is None, "authenticate() should return None when Authorization header is absent"


def test_jwt_authentication_propagates_authentication_failed(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    auth = JWTAuthentication()
    request = DummyRequest(auth_header="Token badtoken")

    # Replace the internal credential check to simulate invalid token behavior
    def fake_authenticate_credentials(token):
        raise AuthenticationFailed("invalid token simulated")

    monkeypatch.setattr(auth, "_authenticate_credentials", fake_authenticate_credentials)

    # Act / Assert
    with pytest.raises(AuthenticationFailed) as excinfo:
        auth.authenticate(request)

    assert "invalid token simulated" in str(excinfo.value)
