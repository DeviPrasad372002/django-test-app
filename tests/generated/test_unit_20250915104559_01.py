import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import pytest
    from conduit.apps.articles.__init__ import ArticlesAppConfig
    from conduit.apps.articles.models import Article, Comment
    from conduit.apps.articles.signals import add_slug_to_article_if_not_exists
    import conduit.apps.core.utils as core_utils
except ImportError:
    import pytest
    pytest.skip("Skipping tests because target modules are not available", allow_module_level=True)


def test_articles_app_config_ready_does_not_raise_and_returns_none():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    app_config = ArticlesAppConfig()
    # Act
    result = None
    try:
        result = app_config.ready()
    except Exception as exc:
        pytest.fail(f"Calling ready() raised an unexpected exception: {exc!r}")
    # Assert
    assert result is None


@pytest.mark.parametrize(
    "model_cls, init_kwargs, expected_substr",
    [
        (Article, {"title": "My Test Article"}, "My Test Article"),
        (Comment, {"body": "This is a comment body"}, "This is a comment body"),
    ],
)
def test_model___str___returns_meaningful_text(model_cls, init_kwargs, expected_substr):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange: create model instance without saving to DB; Django model __str__ should work on instance attributes
    instance = model_cls(**init_kwargs)
    # Act
    string_representation = str(instance)
    # Assert
    assert isinstance(string_representation, str)
    assert expected_substr in string_representation


def test_add_slug_to_article_if_not_exists_generates_slug_when_missing(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # Make random string deterministic
    monkeypatch.setattr(core_utils, "generate_random_string", lambda length=6: "abc123")
    class DummyArticle:
        def __init__(self, title, slug=None):
            self.title = title
            self.slug = slug

    article = DummyArticle(title="Hello World!", slug=None)
    # Act
    add_slug_to_article_if_not_exists(sender=type(article), instance=article)
    # Assert
    assert isinstance(article.slug, str) and article.slug != ""
    # slugify of "Hello World!" -> "hello-world"; combined with our deterministic random string -> "hello-world-abc123"
    assert article.slug.startswith("hello-world-")
    assert article.slug.endswith("abc123")


def test_add_slug_to_article_if_not_exists_preserves_existing_slug(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    monkeypatch.setattr(core_utils, "generate_random_string", lambda length=6: "will_not_be_used")
    class DummyArticle:
        def __init__(self, title, slug):
            self.title = title
            self.slug = slug

    existing_slug = "existing-slug-value"
    article = DummyArticle(title="Ignored Title", slug=existing_slug)
    # Act
    add_slug_to_article_if_not_exists(sender=type(article), instance=article)
    # Assert
    assert article.slug == existing_slug
