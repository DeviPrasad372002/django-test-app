import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

import os, sys, types as _types, pytest as _pytest, warnings
warnings.filterwarnings('ignore', category=DeprecationWarning)
warnings.filterwarnings('ignore', category=PendingDeprecationWarning)
_t = os.environ.get('TARGET_ROOT') or 'target'
if _t and os.path.isdir(_t):
    _p = os.path.abspath(os.path.join(_t, os.pardir))
    [sys.path.insert(0, p) for p in (_p,_t) if p not in sys.path]
    _pkg=_types.ModuleType('target'); _pkg.__path__=[_t]; sys.modules.setdefault('target', _pkg)

try:
    import json
    import pytest
    from conduit.apps.articles.renderers import ArticleJSONRenderer, CommentJSONRenderer
    from conduit.apps.articles.serializers import ArticleSerializer, CommentSerializer, TagSerializer
except ImportError as e:
    import pytest
    pytest.skip(str(e), allow_module_level=True)


@pytest.mark.parametrize(
    "renderer_cls,key,data",
    [
        (ArticleJSONRenderer, "article", {"title": "Test Title", "body": "Test body"}),
        (CommentJSONRenderer, "comment", {"body": "Nice article!", "author": "alice"}),
    ],
)
def test_renderer_wraps_dict_into_expected_top_level_key(renderer_cls, key, data):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    renderer = renderer_cls()

    # Act
    rendered = renderer.render(data)

    # Assert
    assert isinstance(rendered, (bytes, bytearray))
    decoded = rendered.decode()
    parsed = json.loads(decoded)
    assert isinstance(parsed, dict)
    assert key in parsed
    assert parsed[key] == data


def test_renderer_raises_type_error_for_non_serializable_input():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    renderer = ArticleJSONRenderer()
    class NonSerializable:
        pass
    non_serializable = NonSerializable()

    # Act / Assert
    with pytest.raises(TypeError):
        renderer.render(non_serializable)


@pytest.mark.parametrize(
    "serializer_cls",
    [ArticleSerializer, CommentSerializer, TagSerializer],
)
def test_serializers_define_meta_with_fields(serializer_cls):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange / Act
    meta = getattr(serializer_cls, "Meta", None)

    # Assert
    assert meta is not None
    assert hasattr(meta, "fields")
    fields = getattr(meta, "fields")
    assert isinstance(fields, (list, tuple))
    assert len(fields) >= 1
