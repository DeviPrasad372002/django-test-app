import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import pytest
    from types import SimpleNamespace

    from conduit.apps.core.utils import generate_random_string
    from conduit.apps.authentication import models as auth_models
    from conduit.apps.authentication import signals as auth_signals
    from conduit.apps.core import exceptions as core_exceptions

    from rest_framework.exceptions import NotFound
    from rest_framework.response import Response
except ImportError:
    import pytest
    pytest.skip("conduit app modules or rest framework not available, skipping tests", allow_module_level=True)


def test_generate_random_string_various_lengths():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    cases = [1, 5, 16, 0]
    import string

    # Act & Assert
    for n in cases:
        result = generate_random_string(n)

        # Assert: correct type and length
        assert isinstance(result, str)
        assert len(result) == n

        # Assert: all characters are letters or digits (if any)
        if n > 0:
            allowed = set(string.ascii_letters + string.digits)
            assert set(result).issubset(allowed)


def test__generate_jwt_token_encodes_payload_and_returns_token(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    captured = {}

    def fake_encode(payload, key, algorithm="HS256"):
        # capture payload for inspection and return deterministic token
        captured['payload'] = payload
        captured['key'] = key
        captured['algorithm'] = algorithm
        return "encoded.jwt.token"

    # Replace jwt module inside auth_models with a simple namespace providing encode
    monkeypatch.setattr(auth_models, "jwt", SimpleNamespace(encode=fake_encode), raising=False)

    # Create a lightweight user-like object expected by the implementation
    user_like = SimpleNamespace(id=123, pk=123)

    # Act
    token = auth_models._generate_jwt_token(user_like)

    # Assert: token returned and payload contains user id
    assert isinstance(token, str)
    assert token == "encoded.jwt.token"
    assert 'payload' in captured
    # Many implementations use "user_id" or "id" in payload. Accept either but ensure it carries our id.
    payload = captured['payload']
    assert any(payload.get(k) == 123 for k in ("user_id", "id", "pk"))


def test_get_short_name_returns_string_and_uses_available_fields():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # Create a minimal object with both username and email
    user_like = SimpleNamespace(username="shortuser", email="short@example.com")

    # Act
    # The method is defined on the User class; call it as an unbound function with our dummy instance.
    get_short = getattr(auth_models.User, "get_short_name", None)
    assert get_short is not None, "User.get_short_name must exist"

    result = get_short(user_like)

    # Assert: returns a string and is one of the expected fields
    assert isinstance(result, str)
    assert result in (user_like.username, user_like.email)


@pytest.mark.parametrize("created_flag,should_call", [
    (True, True),
    (False, False),
])
def test_create_related_profile_calls_profile_get_or_create_based_on_created(monkeypatch, created_flag, should_call):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    calls = []

    class FakeManager:
        @staticmethod
        def get_or_create(**kwargs):
            calls.append(kwargs)
            return (SimpleNamespace(), True)

    class FakeProfile:
        objects = FakeManager()

    # Monkeypatch the Profile symbol in the signals module
    monkeypatch.setattr(auth_signals, "Profile", FakeProfile, raising=False)

    instance = SimpleNamespace(id=1, pk=1)

    # Act
    auth_signals.create_related_profile(sender=None, instance=instance, created=created_flag)

    # Assert
    if should_call:
        assert len(calls) == 1
        # Ensure the created profile is related to the instance via a user or owner kwarg
        # Accept common kwarg names used by get_or_create calls
        assert any(k in calls[0] for k in ("user", "owner", "user_id", "profile"))
    else:
        assert calls == []


def test_core_exception_handler_handles_not_found_and_generic():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    not_found_exc = NotFound(detail="nope")

    # Act
    resp_nf = core_exceptions.core_exception_handler(not_found_exc, context={})

    # Assert for NotFound: should be a DRF Response-like with 404 if implemented
    if resp_nf is None:
        pytest.skip("core_exception_handler returned None for NotFound; behavior varies by implementation")
    assert isinstance(resp_nf, Response)
    assert getattr(resp_nf, "status_code", None) in (404,)

    # Arrange generic exception
    generic_exc = Exception("boom")

    # Act
    resp_gen = core_exceptions.core_exception_handler(generic_exc, context={})

    # Assert for generic: expect a Response-like with a 5xx status or at least not-200
    if resp_gen is None:
        pytest.skip("core_exception_handler returned None for generic exceptions; behavior varies")
    assert isinstance(resp_gen, Response)
    status = getattr(resp_gen, "status_code", 500)
    assert status >= 400


def test__handle_generic_and_not_found_error_helpers_produce_consistent_response_objects():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # Use the helper functions directly if available
    handle_generic = getattr(core_exceptions, "_handle_generic_error", None)
    handle_not_found = getattr(core_exceptions, "_handle_not_found_error", None)

    if handle_generic is None or handle_not_found is None:
        pytest.skip("Expected helper functions not found in core_exceptions")

    # Act
    resp_generic = handle_generic(Exception("x"))
    resp_not_found = handle_not_found(Exception("y"))

    # Assert: Both should be Response-like objects with data and status_code attributes
    for resp in (resp_generic, resp_not_found):
        assert isinstance(resp, Response)
        assert hasattr(resp, "data")
        assert isinstance(resp.data, (dict, list))
        assert hasattr(resp, "status_code")
        assert isinstance(resp.status_code, int)
