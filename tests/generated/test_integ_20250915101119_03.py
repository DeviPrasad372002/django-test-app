import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

import pytest
import json
from types import SimpleNamespace

try:
    from conduit.apps.authentication.models import User
    from conduit.apps.authentication.renderers import UserJSONRenderer
    from conduit.apps.authentication.signals import create_related_profile
    from conduit.apps.core.utils import generate_random_string
    from conduit.apps.core.exceptions import core_exception_handler
    import conduit.apps.authentication.models as auth_models_module
    import conduit.apps.authentication.signals as auth_signals_module
    import conduit.apps.core.exceptions as core_exceptions_module
except ImportError as e:
    pytest.skip(f"Required project modules not found: {e}", allow_module_level=True)


def test_get_short_name_and__generate_jwt_token_monkeypatched(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # Create a lightweight object that mimics the user instance attributes accessed by the methods.
    user_obj = SimpleNamespace(username="bob", email="bob@example.com", id=42)

    # Monkeypatch jwt.encode inside the authentication.models module to produce deterministic output.
    def fake_jwt_encode(payload, secret, algorithm="HS256"):
        # simple deterministic token using payload contents
        return f"FAKE_TOKEN_user_{payload.get('user_id')}_exp_{payload.get('exp')}"

    monkeypatch.setattr(auth_models_module, "jwt", SimpleNamespace(encode=fake_jwt_encode))

    # Act
    # Call the unbound method functions by passing the fake user instance explicitly.
    short_name = User.get_short_name(user_obj)
    token = User._generate_jwt_token(user_obj)

    # Assert
    assert isinstance(short_name, str), "get_short_name should return a string"
    assert short_name == "bob", "Expected username to be returned as short name"
    assert isinstance(token, str), "_generate_jwt_token should return a string token"
    # token should incorporate the user id as produced by our fake encoder
    assert "user_42" in token


@pytest.mark.parametrize(
    "input_data, expected_fragment",
    [
        ({"user": {"email": "alice@example.com", "username": "alice"}}, '"email": "alice@example.com"'),
        (None, "{}"),
    ],
)
def test_userjsonrenderer_render_basic_behavior(input_data, expected_fragment):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    renderer = UserJSONRenderer()

    # Act
    rendered = renderer.render(input_data, accepted_media_type=None, renderer_context=None)

    # Assert
    # Renderer may return bytes or str depending on implementation; normalize for assertions.
    assert rendered is not None, "Renderer should return a value (bytes or str)"
    if isinstance(rendered, bytes):
        text = rendered.decode("utf-8")
    else:
        text = str(rendered)
    assert expected_fragment in text


@pytest.mark.parametrize("created_flag, should_create", [(True, True), (False, False)])
def test_create_related_profile_calls_profile_creation_when_created(monkeypatch, tmp_path, created_flag, should_create):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    calls = {"created_called": False, "received_kwargs": None}

    class DummyProfileManager:
        def create(self, **kwargs):
            calls["created_called"] = True
            calls["received_kwargs"] = kwargs
            # Return a dummy profile object
            return SimpleNamespace(**kwargs)

    class DummyProfileModel:
        objects = DummyProfileManager()

    # Monkeypatch the Profile reference used by the signal handler to our dummy model
    monkeypatch.setattr(auth_signals_module, "Profile", DummyProfileModel, raising=False)

    # Create a fake user instance that will be passed to the signal handler
    fake_user = SimpleNamespace(id=7, username="siguser")

    # Act
    # The signal receiver signature is typically (sender, instance, created, **kwargs)
    create_related_profile(sender=SimpleNamespace(), instance=fake_user, created=created_flag)

    # Assert
    if should_create:
        assert calls["created_called"] is True
        assert calls["received_kwargs"] is not None
        # The created profile should receive the user in kwargs in typical implementations
        assert "user" in calls["received_kwargs"] and calls["received_kwargs"]["user"] == fake_user
    else:
        assert calls["created_called"] is False


def test_generate_random_string_and_core_exception_handler_routing(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange & Assert for generate_random_string
    s1 = generate_random_string(8)
    s2 = generate_random_string(8)
    assert isinstance(s1, str) and isinstance(s2, str)
    assert len(s1) == 8 and len(s2) == 8
    # Very low probability of collision for short strings, but ensure output differs across calls in normal operation
    assert s1 != s2

    # Now test core_exception_handler routes to specific handlers based on exception attributes.
    # We'll monkeypatch the internal handler functions to observe which is called.
    called = {"not_found": False, "generic": False}

    def fake_not_found_handler(exc, context):
        called["not_found"] = True
        return ("NOT_FOUND_HANDLED", 404)

    def fake_generic_handler(exc, context):
        called["generic"] = True
        return ("GENERIC_HANDLED", 500)

    monkeypatch.setattr(core_exceptions_module, "_handle_not_found_error", fake_not_found_handler, raising=False)
    monkeypatch.setattr(core_exceptions_module, "_handle_generic_error", fake_generic_handler, raising=False)

    # Create fake exception types to trigger different branches.
    class FakeNotFoundExc(Exception):
        status_code = 404
        def __init__(self, detail=None):
            self.detail = detail or "not found"

    class FakeGenericExc(Exception):
        status_code = 500
        def __init__(self, detail=None):
            self.detail = detail or "server error"

    # Act & Assert for NotFound routing
    result_nf = core_exception_handler(FakeNotFoundExc("missing"), {})
    assert called["not_found"] is True
    assert result_nf == ("NOT_FOUND_HANDLED", 404)

    # Reset and test generic routing
    called["not_found"] = False
    result_gen = core_exception_handler(FakeGenericExc("boom"), {})
    assert called["generic"] is True
    assert result_gen == ("GENERIC_HANDLED", 500)
