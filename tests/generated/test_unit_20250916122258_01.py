import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

import os, sys, types as _types, pytest as _pytest, warnings
warnings.filterwarnings('ignore', category=DeprecationWarning)
warnings.filterwarnings('ignore', category=PendingDeprecationWarning)
_t = os.environ.get('TARGET_ROOT') or 'target'
if _t and os.path.isdir(_t):
    _p = os.path.abspath(os.path.join(_t, os.pardir))
    [sys.path.insert(0, p) for p in (_p,_t) if p not in sys.path]
    _pkg=_types.ModuleType('target'); _pkg.__path__=[_t]; sys.modules.setdefault('target', _pkg)

import pytest as _pytest
_pytest.skip('generator: banned private imports detected; skipping module', allow_module_level=True)

try:
    import pytest
    from conduit.apps.core import utils as core_utils
    from conduit.apps.articles import signals as article_signals
except ImportError:
    import pytest as _pytest
    _pytest.skip("Django or project imports not available, skipping tests", allow_module_level=True)


class DummyArticle:
    def __init__(self, title=None, slug=None):
        self.title = title
        self.slug = slug


@pytest.mark.parametrize("size, expected_len", [
    (0, 0),
    (1, 1),
    (10, 10),
])
def test_generate_random_string_returns_string_of_requested_length(size, expected_len):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # Act
    result = core_utils.generate_random_string(size)
    # Assert
    assert isinstance(result, str)
    assert len(result) == expected_len


def test_add_slug_to_article_if_not_exists_creates_slug_when_missing(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    dummy = DummyArticle(title="My Test Title", slug=None)

    # Make slugify deterministic
    monkeypatch.setattr(article_signals, "slugify", lambda t: "my-test-title")
    # Make random string deterministic
    monkeypatch.setattr(article_signals, "generate_random_string", lambda n=6: "RND123")

    # Act
    # function signature typically: (sender, instance, created, **kwargs)
    article_signals.add_slug_to_article_if_not_exists(sender=None, instance=dummy, created=True)

    # Assert
    assert isinstance(dummy.slug, str)
    # Expect slug to contain slugified title and the generated random string joined by a dash
    assert dummy.slug == "my-test-title-RND123"


def test_add_slug_to_article_if_not_exists_respects_existing_slug_and_created_flag(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # Case A: slug already exists -> should remain unchanged
    dummy_with_slug = DummyArticle(title="Ignored Title", slug="existing-slug")
    monkeypatch.setattr(article_signals, "slugify", lambda t: "should-not-be-used")
    monkeypatch.setattr(article_signals, "generate_random_string", lambda n=6: "IGNORED")

    # Act
    article_signals.add_slug_to_article_if_not_exists(sender=None, instance=dummy_with_slug, created=True)

    # Assert
    assert dummy_with_slug.slug == "existing-slug"

    # Case B: created flag False -> should not create slug even if missing
    dummy_created_false = DummyArticle(title="New Title", slug=None)
    monkeypatch.setattr(article_signals, "slugify", lambda t: "new-title")
    monkeypatch.setattr(article_signals, "generate_random_string", lambda n=6: "NOP")

    article_signals.add_slug_to_article_if_not_exists(sender=None, instance=dummy_created_false, created=False)

    assert dummy_created_false.slug is None or dummy_created_false.slug == ""
