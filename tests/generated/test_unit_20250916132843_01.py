import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

import os, sys, types as _types, pytest as _pytest, warnings
warnings.filterwarnings('ignore', category=DeprecationWarning)
warnings.filterwarnings('ignore', category=PendingDeprecationWarning)
_t = os.environ.get('TARGET_ROOT') or 'target'
if _t and os.path.isdir(_t):
    _p = os.path.abspath(os.path.join(_t, os.pardir))
    [sys.path.insert(0, p) for p in (_p,_t) if p not in sys.path]
    _pkg=_types.ModuleType('target'); _pkg.__path__=[_t]; sys.modules.setdefault('target', _pkg)

import sys
import types
import datetime
from datetime import timezone

try:
    import pytest
    from target.conduit.apps.articles.models import Article
    from target.conduit.apps.articles.signals import add_slug_to_article_if_not_exists
    from target.conduit.apps.articles.__init__ import ArticlesAppConfig
    from target.conduit.apps.core import utils as core_utils
except ImportError:
    import pytest
    pytest.skip("Required target.conduit modules not available", allow_module_level=True)


def test_article_str_returns_title():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    title = "My Unique Title"
    article = Article(title=title)
    # Act
    result = str(article)
    # Assert
    assert isinstance(result, str)
    assert result == title


def test_add_slug_to_article_if_not_exists_sets_and_preserves(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    class DummyArticle:
        def __init__(self, title, slug=None):
            self.title = title
            self.slug = slug

    dummy = DummyArticle(title="Hello World", slug=None)

    # Ensure deterministic random string generation for the test
    monkeypatch.setattr(core_utils, "generate_random_string", lambda n: "ABC", raising=False)

    # Act
    add_slug_to_article_if_not_exists(sender=None, instance=dummy, created=True)

    # Assert: slug should be created and slugified (lowercased)
    assert isinstance(dummy.slug, str)
    assert dummy.slug == "hello-world-abc"

    # Arrange (existing slug should be preserved)
    dummy_existing = DummyArticle(title="Another Title", slug="existing-slug")
    # Act
    add_slug_to_article_if_not_exists(sender=None, instance=dummy_existing, created=True)
    # Assert
    assert dummy_existing.slug == "existing-slug"


def test_articles_appconfig_ready_imports_signals_without_error(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    fake_mod_name_variants = [
        "conduit.apps.articles.signals",
        "target.conduit.apps.articles.signals",
    ]
    fake_module = types.ModuleType("fake_signals_module")
    fake_module.MARKER = True

    # Insert our fake module under possible import names so ready() picks it up
    for name in fake_mod_name_variants:
        sys.modules[name] = fake_module

    app_config = ArticlesAppConfig("articles", "conduit.apps.articles")

    # Act & Assert: calling ready should not raise and the fake module remains available
    app_config.ready()
    for name in fake_mod_name_variants:
        assert name in sys.modules
        assert getattr(sys.modules[name], "MARKER", False) is True


@pytest.mark.parametrize(
    "n, expected_len, expect_error",
    [
        (6, 6, None),   # normal case
        (0, 0, None),   # edge case: zero length
        (-1, None, ValueError),  # error case: negative length
    ],
)
def test_generate_random_string_behaviour(n, expected_len, expect_error):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange & Act
    if expect_error:
        with pytest.raises(expect_error):
            core_utils.generate_random_string(n)
        return

    result = core_utils.generate_random_string(n)

    # Assert
    assert isinstance(result, str)
    assert len(result) == expected_len
    # characters should be printable ASCII letters/digits; at least ensure no whitespace
    assert result == result.strip()
    if expected_len > 0:
        assert any(ch.isalpha() or ch.isdigit() for ch in result)
