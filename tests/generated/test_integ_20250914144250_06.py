import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.exists(_target):
    if _target not in sys.path: sys.path.insert(0, _target)
    try: os.chdir(_target)
    except Exception: pass

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

def _apply_compatibility_fixes():
    try:
        import jinja2
        if not hasattr(jinja2, 'Markup'):
            try:
                from markupsafe import Markup, escape
                jinja2.Markup = Markup
                if not hasattr(jinja2, 'escape'):
                    jinja2.escape = escape
            except Exception:
                pass
    except ImportError:
        pass
    try:
        import collections as _collections, collections.abc as _abc
        for _n in ('Mapping','MutableMapping','Sequence','Iterable','Container',
                   'MutableSequence','Set','MutableSet','Iterator','Generator','Callable','Collection'):
            if not hasattr(_collections, _n) and hasattr(_abc, _n):
                setattr(_collections, _n, getattr(_abc, _n))
    except Exception:
        pass
    try:
        import marshmallow as _mm
        if not hasattr(_mm, "__version__"):
            _mm.__version__ = "4"
    except Exception:
        pass

_apply_compatibility_fixes()

# Minimal, safe Django bootstrap. If anything goes wrong, skip the module (repo-agnostic).
try:
    import django
    from django.conf import settings as _dj_settings
    from django import apps as _dj_apps

    if not _dj_settings.configured:
        _cfg = dict(
            DEBUG=True,
            SECRET_KEY='pytest-secret',
            DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
            INSTALLED_APPS=[
                'django.contrib.auth','django.contrib.contenttypes',
                'django.contrib.sessions','django.contrib.messages'
            ],
            MIDDLEWARE=[
                'django.middleware.security.SecurityMiddleware',
                'django.contrib.sessions.middleware.SessionMiddleware',
                'django.middleware.common.CommonMiddleware',
            ],
            USE_TZ=True, TIME_ZONE='UTC',
        )
        try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
        except Exception: pass
        try: _dj_settings.configure(**_cfg)
        except Exception: pass

    if not _dj_apps.ready:
        try: django.setup()
        except Exception: pass

    # Probe a known Django core that previously crashed on some stacks.
    try:
        import django.contrib.auth.base_user as _dj_probe  # noqa
    except Exception as _e:
        _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
except Exception as _e:
    # Do NOT crash the entire test session â€“ make the module opt-out.
    _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)


# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import pytest
    import importlib
    from unittest import mock
    from types import SimpleNamespace
    import datetime
    from conduit.apps.authentication import serializers as auth_serializers
    from conduit.apps.authentication import models as auth_models
    from conduit.apps.authentication import views as auth_views
    from conduit.apps.authentication.backends import JWTAuthentication
except ImportError as e:
    import pytest
    pytest.skip("Skipping tests due to ImportError: {}".format(e), allow_module_level=True)

def _exc_lookup(name, default=Exception):
    try:
        mod = importlib.import_module('rest_framework.exceptions')
        return getattr(mod, name, default)
    except Exception:
        return default

def test_registration_serializer_calls_create_user_and_returns_token(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    payload = {'username': 'alice', 'email': 'alice@example.com', 'password': 's3cr3t'}
    create_user_mock = mock.Mock()
    fake_user = SimpleNamespace(username='alice', email='alice@example.com', token='faketoken')
    create_user_mock.return_value = fake_user
    # Patch the manager method so RegistrationSerializer.create uses it without touching DB
    monkeypatch.setattr(auth_models.UserManager, 'create_user', staticmethod(create_user_mock))
    serializer = auth_serializers.RegistrationSerializer(data=payload)
    # Act
    created = auth_serializers.RegistrationSerializer.create(serializer, payload)
    # Assert
    assert create_user_mock.called is True
    assert created is fake_user
    assert getattr(created, 'token') == 'faketoken'
    assert getattr(created, 'username') == 'alice'
    assert getattr(created, 'email') == 'alice@example.com'

@pytest.mark.parametrize("valid_credentials", [True, False])
def test_login_serializer_validate_success_and_failure(monkeypatch, valid_credentials):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    payload = {'email': 'bob@example.com', 'password': 'passw0rd'}
    if valid_credentials:
        fake_user = SimpleNamespace(email='bob@example.com', token='logintoken')
        auth_return = fake_user
    else:
        auth_return = None
    auth_mock = mock.Mock(return_value=auth_return)
    # Patch authenticate where serializers refer to it
    monkeypatch.setattr(auth_serializers, 'authenticate', auth_mock)
    serializer = auth_serializers.LoginSerializer(data=payload)
    # Act / Assert
    if valid_credentials:
        validated = auth_serializers.LoginSerializer.validate(serializer, payload)
        # The serializer may return {'user': {...}} or direct fields; accept both patterns
        token = None
        if isinstance(validated, _exc_lookup("dict", Exception)) and 'user' in validated and isinstance(validated['user'], dict):
            token = validated['user'].get('token')
            email = validated['user'].get('email', validated['user'].get('username'))
        else:
            token = validated.get('token')
            email = validated.get('email') or validated.get('username')
        assert token == getattr(auth_return, 'token')
        assert email == getattr(auth_return, 'email')
        assert auth_mock.called is True
    else:
        AuthFailed = _exc_lookup('AuthenticationFailed', Exception)
        with pytest.raises(_exc_lookup("AuthFailed", Exception)):
            auth_serializers.LoginSerializer.validate(serializer, payload)
        assert auth_mock.called is True

def test_jwt_authentication_decodes_token_and_fetches_user(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    backends_mod = importlib.import_module('conduit.apps.authentication.backends')
    fake_payload = {'id': 42, 'email': 'carol@example.com'}
    # Patch the jwt module used in the backend to return predictable payload
    mock_jwt = SimpleNamespace(decode=mock.Mock(return_value=fake_payload))
    monkeypatch.setattr(backends_mod, 'jwt', mock_jwt)
    # Provide a fake User.objects.get that returns a user without hitting DB
    fake_user = SimpleNamespace(id=42, email='carol@example.com')
    monkeypatch.setattr(auth_models, 'User', SimpleNamespace(objects=SimpleNamespace(get=mock.Mock(return_value=fake_user))))
    backend = JWTAuthentication()
    token_value = 'faketokenvalue'
    # Act
    user, token = backend._authenticate_credentials(token_value)
    # Assert
    assert user is fake_user
    assert token == token_value
    # Ensure jwt.decode was invoked with the token
    assert mock_jwt.decode.called is True
    called_args = mock_jwt.decode.call_args[0]
    assert token_value in called_args

def test_user_retrieve_update_view_updates_via_serializer_and_updates_timestamp(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    views_mod = importlib.import_module('conduit.apps.authentication.views')
    # Create a fake user instance with timestamp attributes
    old_time = datetime.datetime.utcnow() - datetime.timedelta(days=1)
    fake_user = SimpleNamespace(username='oldname', updated_at=old_time)
    # Create a fake serializer class to be used by the view
    class FakeUserSerializer:
        def __init__(self, instance=None, data=None, partial=False):
            self.instance = instance
            self.data_in = data or {}
            self.partial = partial
            self._validated = {}
        def is_valid(self, raise_exception=False):
            # Accept any payload as valid for this integration test
            self._validated = dict(self.data_in)
            return True
        def save(self):
            # Mutate the instance to emulate model save and update timestamp
            if 'username' in self._validated:
                self.instance.username = self._validated['username']
            # emulate TimestampedModel behavior: update updated_at
            self.instance.updated_at = datetime.datetime.utcnow()
            return self.instance
        @property
        def data(self):
            return {'user': {'username': self.instance.username, 'updated_at': self.instance.updated_at.isoformat()}}
    # Patch the UserSerializer used in the view module
    monkeypatch.setattr(views_mod, 'UserSerializer', FakeUserSerializer)
    view = views_mod.UserRetrieveUpdateAPIView()
    # Create a fake request object with user and data as expected by the view
    request = SimpleNamespace(user=fake_user, data={'username': 'newname'})
    # Act
    response = view.put(request)
    # Assert
    assert isinstance(response, _exc_lookup("object", Exception))
    # Response should include the serialized user data
    resp_data = getattr(response, 'data', None)
    assert isinstance(resp_data, _exc_lookup("dict", Exception))
    assert 'user' in resp_data
    assert resp_data['user']['username'] == 'newname'
    # Ensure the fake_user instance was mutated and timestamp updated
    assert fake_user.username == 'newname'
    assert isinstance(fake_user.updated_at, datetime.datetime)
    assert fake_user.updated_at > old_time
