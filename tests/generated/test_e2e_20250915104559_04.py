import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import pytest
    from conduit.apps.articles.models import Article, Comment, Tag
    from conduit.apps.articles.relations import TagRelatedField
    from rest_framework import serializers as drf_serializers
except ImportError:
    import pytest
    pytest.skip("Django and DRF are required for these tests", allow_module_level=True)


@pytest.mark.parametrize(
    "model_cls, init_kwargs, expected_str",
    [
        # Arrange normal cases: provide minimal fields expected to back __str__
        (Article, {"title": "Test Article Title"}, "Test Article Title"),
        (Comment, {"body": "This is a comment body."}, "This is a comment body."),
        (Tag, {"name": "python"}, "python"),
    ],
)
def test_model___str__returns_primary_text_field(model_cls, init_kwargs, expected_str):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange: instantiate the model with a representative field value
    instance = model_cls(**init_kwargs)

    # Act: call __str__ via str()
    result = str(instance)

    # Assert: the textual representation matches the main identifying field
    assert isinstance(result, str)
    assert result == expected_str


def test_tagrelatedfield_to_representation_and_none_handling():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange: create TagRelatedField instance and two dummy objects
    field = TagRelatedField()

    class DummyWithName:
        def __init__(self, name):
            self.name = name

    obj_with_name = DummyWithName("dj")
    obj_with_none = DummyWithName(None)

    # Act: represent both objects
    rep_name = field.to_representation(obj_with_name)
    rep_none = field.to_representation(obj_with_none)

    # Assert: returns the underlying name attribute value (including None preservation)
    assert rep_name == "dj"
    assert rep_none is None


@pytest.mark.parametrize(
    "input_value, expected_exception",
    [
        (123, getattr(drf_serializers, "ValidationError", ValueError)),
        ({"not": "a string"}, getattr(drf_serializers, "ValidationError", ValueError)),
        (["list"], getattr(drf_serializers, "ValidationError", ValueError)),
    ],
)
def test_tagrelatedfield_to_internal_value_raises_on_non_string(input_value, expected_exception):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange: TagRelatedField instance
    field = TagRelatedField()

    # Act / Assert: non-string inputs should raise a DRF ValidationError (or fallback)
    with pytest.raises(expected_exception):
        field.to_internal_value(input_value)
