import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.exists(_target):
    if _target not in sys.path: sys.path.insert(0, _target)
    try: os.chdir(_target)
    except Exception: pass

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

def _apply_compatibility_fixes():
    try:
        import jinja2
        if not hasattr(jinja2, 'Markup'):
            try:
                from markupsafe import Markup, escape
                jinja2.Markup = Markup
                if not hasattr(jinja2, 'escape'):
                    jinja2.escape = escape
            except Exception:
                pass
    except ImportError:
        pass
    try:
        import collections as _collections, collections.abc as _abc
        for _n in ('Mapping','MutableMapping','Sequence','Iterable','Container',
                   'MutableSequence','Set','MutableSet','Iterator','Generator','Callable','Collection'):
            if not hasattr(_collections, _n) and hasattr(_abc, _n):
                setattr(_collections, _n, getattr(_abc, _n))
    except Exception:
        pass
    try:
        import marshmallow as _mm
        if not hasattr(_mm, "__version__"):
            _mm.__version__ = "4"
    except Exception:
        pass

_apply_compatibility_fixes()

# Minimal, safe Django bootstrap. If anything goes wrong, skip the module (repo-agnostic).
try:
    import django
    from django.conf import settings as _dj_settings
    from django import apps as _dj_apps

    if not _dj_settings.configured:
        _cfg = dict(
            DEBUG=True,
            SECRET_KEY='pytest-secret',
            DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
            INSTALLED_APPS=[
                'django.contrib.auth','django.contrib.contenttypes',
                'django.contrib.sessions','django.contrib.messages'
            ],
            MIDDLEWARE=[
                'django.middleware.security.SecurityMiddleware',
                'django.contrib.sessions.middleware.SessionMiddleware',
                'django.middleware.common.CommonMiddleware',
            ],
            USE_TZ=True, TIME_ZONE='UTC',
        )
        try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
        except Exception: pass
        try: _dj_settings.configure(**_cfg)
        except Exception: pass

    if not _dj_apps.ready:
        try: django.setup()
        except Exception: pass

    # Probe a known Django core that previously crashed on some stacks.
    try:
        import django.contrib.auth.base_user as _dj_probe  # noqa
    except Exception as _e:
        _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
except Exception as _e:
    # Do NOT crash the entire test session â€“ make the module opt-out.
    _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)


# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

import pytest as _pytest
_pytest.skip('generator: banned private imports detected; skipping module', allow_module_level=True)

try:
    import pytest
    from types import SimpleNamespace
    import string

    import conduit.apps.core.utils as core_utils
    import conduit.apps.articles.models as articles_models
    import conduit.apps.articles.relations as article_relations
except ImportError as e:  # pragma: no cover - skip module if imports fail
    import pytest as _pytest
    _pytest.skip(f"Required modules for tests not available: {e}", allow_module_level=True)

def _exc_lookup(name, default=Exception):
    import builtins
    return getattr(builtins, name, default)

@pytest.mark.parametrize("length", [0, 1, 16, 64])
def test_generate_random_string_length_and_charset(length):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    allowed = set(string.ascii_letters + string.digits)

    # Act
    result = core_utils.generate_random_string(length)

    # Assert
    assert isinstance(result, _exc_lookup("str", Exception))
    assert len(result) == length
    # each character should be within allowed charset (empty string trivially passes)
    assert all(ch in allowed for ch in result)

def test_generate_random_string_uniqueness_for_nontrivial_length():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    length = 12

    # Act
    a = core_utils.generate_random_string(length)
    b = core_utils.generate_random_string(length)

    # Assert
    assert isinstance(a, _exc_lookup("str", Exception)) and isinstance(b, _exc_lookup("str", Exception))
    # Very small chance of collision; assert they are not identical to catch obvious issues
    assert len(a) == length and len(b) == length
    assert a != b

@pytest.mark.parametrize("model_cls, init_kwargs, expected_substring", [
    (articles_models.Article, {"title": "My Unique Article Title"}, "My Unique Article Title"),
    (articles_models.Comment, {"body": "This is a comment body"}, "This is a comment body"),
])
def test_model___str___contains_expected_field(model_cls, init_kwargs, expected_substring):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange: create instance without touching DB; Django model __init__ accepts kwargs
    instance = model_cls(**init_kwargs)

    # Act
    rep = str(instance)

    # Assert
    assert isinstance(rep, _exc_lookup("str", Exception))
    # The string representation should contain the meaningful text passed in (title or body)
    assert expected_substring in rep

@pytest.mark.parametrize("input_obj, expected", [
    (SimpleNamespace(name="tag-one"), "tag-one"),
    (SimpleNamespace(name=""), ""),
])
def test_tagrelatedfield_to_representation_handles_objects_with_name(input_obj, expected):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    field = article_relations.TagRelatedField(queryset=None)

    # Act
    rep = field.to_representation(input_obj)

    # Assert
    assert isinstance(rep, _exc_lookup("str", Exception))
    assert rep == expected

@pytest.mark.parametrize("value, expect_error", [
    ("single-tag", False),
    (["list", "of", "tags"], False),
    (None, True),
])
def test_tagrelatedfield_to_internal_value_various_inputs(value, expect_error):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    field = article_relations.TagRelatedField(queryset=None)

    # Act / Assert
    if expect_error:
        exc_type = _exc_lookup('TypeError', Exception)
        with pytest.raises(_exc_lookup("exc_type", Exception)):
            field.to_internal_value(value)
    else:
        result = field.to_internal_value(value)
        # Expect the internal value to be either a string (for single) or iterable of strings
        assert result is not None
        if isinstance(value, _exc_lookup("str", Exception)):
            assert isinstance(result, _exc_lookup("str", Exception))
            assert result == value
        else:
            # assume iterable input yields iterable output
            assert hasattr(result, "__iter__")
            assert list(result) == list(value)
