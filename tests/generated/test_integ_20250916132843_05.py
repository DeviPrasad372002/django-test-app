import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

import os, sys, types as _types, pytest as _pytest, warnings
warnings.filterwarnings('ignore', category=DeprecationWarning)
warnings.filterwarnings('ignore', category=PendingDeprecationWarning)
_t = os.environ.get('TARGET_ROOT') or 'target'
if _t and os.path.isdir(_t):
    _p = os.path.abspath(os.path.join(_t, os.pardir))
    [sys.path.insert(0, p) for p in (_p,_t) if p not in sys.path]
    _pkg=_types.ModuleType('target'); _pkg.__path__=[_t]; sys.modules.setdefault('target', _pkg)

try:
    import json
    import datetime
    import types
    import pytest
    from conduit.apps.articles.renderers import ArticleJSONRenderer, CommentJSONRenderer
    from conduit.apps.articles.serializers import ArticleSerializer
    import conduit.apps.authentication.backends as backends
    from rest_framework.exceptions import AuthenticationFailed
except ImportError:
    import pytest
    pytest.skip("skipping tests due to missing third-party packages", allow_module_level=True)


@pytest.mark.parametrize(
    "renderer_class,input_data,expect_key",
    [
        (ArticleJSONRenderer, {"article": {"title": "T", "body": "B"}}, "article"),
        (ArticleJSONRenderer, {}, None),
        (CommentJSONRenderer, {"comment": {"body": "C"}}, "comment"),
    ],
)
def test_renderers_produce_json_bytes_and_structure(renderer_class, input_data, expect_key):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    renderer = renderer_class()

    # Act
    rendered = renderer.render(input_data)

    # Assert
    assert isinstance(rendered, (bytes, bytearray))
    text = rendered.decode("utf-8")
    parsed = json.loads(text)
    assert isinstance(parsed, dict)
    if expect_key is not None:
        assert expect_key in parsed
    else:
        # empty dict should round-trip to an empty dict representation
        assert parsed == {}


def test_renderer_raises_on_unserializable_object():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    renderer = ArticleJSONRenderer()
    bad = {"article": {"title": "ok", "broken": {1, 2, 3}}}  # set is not JSON serializable

    # Act / Assert
    with pytest.raises(TypeError):
        renderer.render(bad)


def test__authenticate_credentials_resolves_user_and_raises_when_missing(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    if not hasattr(backends, "_authenticate_credentials"):
        pytest.skip("_authenticate_credentials not present in backends")

    # Build a fake User model to inject into the backends module
    class FakeDoesNotExist(Exception):
        pass

    class FakeUser:
        DoesNotExist = FakeDoesNotExist

        def __init__(self, pk, username="u", is_active=True):
            self.pk = pk
            self.username = username
            self.is_active = is_active

        def __repr__(self):
            return f"<FakeUser {self.pk}>"

    class FakeManager:
        def get(self, pk):
            if pk == 1:
                return FakeUser(pk=1, username="present")
            raise FakeUser.DoesNotExist()

    FakeUser.objects = FakeManager()

    # Inject fake User into the backends module
    monkeypatch.setattr(backends, "User", FakeUser, raising=False)

    # Act: successful resolution
    user = backends._authenticate_credentials({"user_id": 1})
    # Assert
    assert isinstance(user, FakeUser)
    assert user.pk == 1
    assert getattr(user, "username") == "present"

    # Act / Assert: missing user should raise AuthenticationFailed
    with pytest.raises(AuthenticationFailed):
        backends._authenticate_credentials({"user_id": 2})


@pytest.mark.parametrize(
    "updated_at_value,expected_contains",
    [
        (datetime.datetime(2020, 1, 2, 3, 4, 5, tzinfo=datetime.timezone.utc), "2020-01-02T03:04:05"),
        (None, None),
    ],
)
def test_article_serializer_get_updated_at_behavior(updated_at_value, expected_contains):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    if not hasattr(ArticleSerializer, "get_updated_at"):
        pytest.skip("ArticleSerializer.get_updated_at not present")

    serializer = ArticleSerializer()

    class DummyArticle:
        def __init__(self, updated_at):
            self.updated_at = updated_at

    article = DummyArticle(updated_at_value)

    # Act
    result = serializer.get_updated_at(article)

    # Assert
    if expected_contains is None:
        assert result is None
    else:
        assert isinstance(result, str)
        assert expected_contains in result
