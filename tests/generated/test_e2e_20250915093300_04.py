import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import pytest
    from conduit.apps.articles import relations
    from rest_framework import exceptions as rf_exc
except ImportError as e:
    import pytest
    pytest.skip(f"Skipping tests because import failed: {e}", allow_module_level=True)


def test_tagrelatedfield_to_representation_returns_tag_name():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    class FakeTag:
        def __init__(self, name):
            self.name = name

    fake = FakeTag("python")

    # Act
    result = relations.TagRelatedField.to_representation(None, fake)

    # Assert
    assert isinstance(result, str), "to_representation should return a string"
    assert result == "python"


@pytest.mark.parametrize(
    "input_name, raise_exc, expected_exception, expected_name",
    [
        ("python", None, None, "python"),  # normal case
        ("", None, None, ""),               # edge: empty tag name
        ("bad", RuntimeError("db"), rf_exc.ValidationError, None),  # error path
    ],
)
def test_tagrelatedfield_to_internal_value_success_and_errors(monkeypatch, input_name, raise_exc, expected_exception, expected_name):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    class FakeTag:
        def __init__(self, name):
            self.name = name

    class FakeTagModelInstance:
        def __init__(self, to_raise=None):
            # emulate Tag.objects API by making .objects point to self
            self.objects = self
            self._to_raise = to_raise

        def get_or_create(self, name):
            if self._to_raise:
                raise self._to_raise
            return (FakeTag(name), True)

    fake_model = FakeTagModelInstance(to_raise=raise_exc)
    # Replace the Tag model in the relations module with our fake model instance
    monkeypatch.setattr(relations, "Tag", fake_model, raising=True)

    # Act / Assert
    if expected_exception is None:
        out = relations.TagRelatedField.to_internal_value(None, input_name)
        assert hasattr(out, "name"), "to_internal_value should return an object with a 'name' attribute"
        assert out.name == expected_name
    else:
        with pytest.raises(expected_exception):
            relations.TagRelatedField.to_internal_value(None, input_name)
