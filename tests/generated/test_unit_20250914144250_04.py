import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.exists(_target):
    if _target not in sys.path: sys.path.insert(0, _target)
    try: os.chdir(_target)
    except Exception: pass

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

def _apply_compatibility_fixes():
    try:
        import jinja2
        if not hasattr(jinja2, 'Markup'):
            try:
                from markupsafe import Markup, escape
                jinja2.Markup = Markup
                if not hasattr(jinja2, 'escape'):
                    jinja2.escape = escape
            except Exception:
                pass
    except ImportError:
        pass
    try:
        import collections as _collections, collections.abc as _abc
        for _n in ('Mapping','MutableMapping','Sequence','Iterable','Container',
                   'MutableSequence','Set','MutableSet','Iterator','Generator','Callable','Collection'):
            if not hasattr(_collections, _n) and hasattr(_abc, _n):
                setattr(_collections, _n, getattr(_abc, _n))
    except Exception:
        pass
    try:
        import marshmallow as _mm
        if not hasattr(_mm, "__version__"):
            _mm.__version__ = "4"
    except Exception:
        pass

_apply_compatibility_fixes()

# Minimal, safe Django bootstrap. If anything goes wrong, skip the module (repo-agnostic).
try:
    import django
    from django.conf import settings as _dj_settings
    from django import apps as _dj_apps

    if not _dj_settings.configured:
        _cfg = dict(
            DEBUG=True,
            SECRET_KEY='pytest-secret',
            DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
            INSTALLED_APPS=[
                'django.contrib.auth','django.contrib.contenttypes',
                'django.contrib.sessions','django.contrib.messages'
            ],
            MIDDLEWARE=[
                'django.middleware.security.SecurityMiddleware',
                'django.contrib.sessions.middleware.SessionMiddleware',
                'django.middleware.common.CommonMiddleware',
            ],
            USE_TZ=True, TIME_ZONE='UTC',
        )
        try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
        except Exception: pass
        try: _dj_settings.configure(**_cfg)
        except Exception: pass

    if not _dj_apps.ready:
        try: django.setup()
        except Exception: pass

    # Probe a known Django core that previously crashed on some stacks.
    try:
        import django.contrib.auth.base_user as _dj_probe  # noqa
    except Exception as _e:
        _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
except Exception as _e:
    # Do NOT crash the entire test session â€“ make the module opt-out.
    _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)


# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import pytest
    from types import SimpleNamespace
    from unittest import mock

    import conduit.apps.profiles.serializers as profiles_serializers
    import conduit.apps.articles.relations as articles_relations
except ImportError:
    import pytest
    pytest.skip("Required application modules not available", allow_module_level=True)


@pytest.mark.parametrize(
    "image_value,expected",
    [
        ("http://example.com/me.png", "http://example.com/me.png"),  # normal case: explicit image
        (None, "https://static.productionready.io/images/smiley-cyrus.jpg"),  # edge: None -> default
        ("", "https://static.productionready.io/images/smiley-cyrus.jpg"),  # edge: empty string -> default
    ],
)
def test_get_image_returns_provided_or_default(image_value, expected):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # resolve get_image function robustly whether it's module-level or serializer method
    if hasattr(profiles_serializers, "get_image"):
        get_image_fn = profiles_serializers.get_image
    else:
        ProfileSerializer = getattr(profiles_serializers, "ProfileSerializer")
        try:
            get_image_fn = lambda user: ProfileSerializer().get_image(user)
        except Exception:
            get_image_fn = lambda user: ProfileSerializer.get_image(ProfileSerializer(), user)

    user = SimpleNamespace(image=image_value)

    # Act
    result = get_image_fn(user)

    # Assert
    assert isinstance(result, _exc_lookup("str", Exception))
    assert result == expected


@pytest.mark.parametrize(
    "is_authenticated,is_following_return,expected",
    [
        (False, False, False),  # not authenticated -> not following
        (True, True, True),  # authenticated and following -> True
        (True, False, False),  # authenticated but not following -> False
    ],
)
def test_get_following_respects_auth_and_is_following(is_authenticated, is_following_return, expected):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # Determine get_following resolver: module-level or serializer method
    if hasattr(profiles_serializers, "get_following"):
        get_following_unbound = profiles_serializers.get_following
        # we need a serializer-like object to bind to if necessary
        serializer_self = SimpleNamespace(context={})
        get_following = lambda self, obj: get_following_unbound(self, obj)
    else:
        ProfileSerializer = getattr(profiles_serializers, "ProfileSerializer")
        # Attempt to construct a serializer instance with context if possible
        try:
            serializer_self = ProfileSerializer(context={})
            get_following = lambda self, obj: serializer_self.get_following(obj)
        except Exception:
            # fallback: create a simple holder with context attribute used by implementation
            serializer_self = SimpleNamespace(context={})
            get_following = lambda self, obj: getattr(profiles_serializers.ProfileSerializer, "get_following")(self, obj)

    # create request user and object being inspected
    def is_following_stub(other):
        # ignores other, returns configured value
        return is_following_return

    request_user = SimpleNamespace(is_authenticated=is_authenticated, is_following=is_following_stub)
    # Provide context as expected by serializer implementations
    serializer_self.context = {"request": SimpleNamespace(user=request_user)}

    profile_owner = SimpleNamespace(username="author")  # object to check following status for

    # Act
    result = get_following(serializer_self, profile_owner)

    # Assert
    assert isinstance(result, _exc_lookup("bool", Exception))
    assert result is expected


@pytest.mark.parametrize(
    "input_value,expect_error",
    [
        ("python", False),  # normal string -> tag instance returned
        ("", True),  # empty string -> validation/error path
        (123, True),  # non-string -> validation/error path
    ],
)
def test_tagrelatedfield_to_internal_value_and_to_representation(monkeypatch, input_value, expect_error):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # Create a TagRelatedField instance (or fallback simple proxy if instantiation fails)
    try:
        field = articles_relations.TagRelatedField()
    except Exception:
        # Minimal proxy that forwards expected calls if the real field cannot be instantiated
        class _Proxy:
            def to_internal_value(self, data):
                return getattr(self, "_impl_to_internal")(data)

            def to_representation(self, obj):
                return getattr(self, "_impl_to_repr")(obj)

        field = _Proxy()

    # Prepare fake Tag manager and Tag object
    fake_tag = SimpleNamespace(name="python")
    fake_manager = mock.Mock()
    fake_manager.get_or_create.return_value = (fake_tag, True)

    # Monkeypatch the Tag symbol used inside relations module to controlled fake
    monkeypatch.setattr(articles_relations, "Tag", SimpleNamespace(objects=fake_manager), raising=False)

    # Provide implementations if we used proxy
    if not hasattr(field, "to_internal_value") or isinstance(field, _exc_lookup("SimpleNamespace", Exception)):
        pytest.skip("TagRelatedField unavailable in this environment", allow_module_level=True)

    # Act / Assert
    if expect_error:
        with pytest.raises(_exc_lookup("Exception", Exception)):
            # call - expecting an exception for invalid inputs
            field.to_internal_value(input_value)
    else:
        # valid input path
        tag_obj = field.to_internal_value(input_value)
        # Assert internal value produces the tag object from manager
        assert tag_obj is fake_tag
        # Representing should return the tag name
        rep = field.to_representation(fake_tag)
        assert isinstance(rep, _exc_lookup("str", Exception))
        assert rep == "python"
