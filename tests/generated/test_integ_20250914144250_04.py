import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.exists(_target):
    if _target not in sys.path: sys.path.insert(0, _target)
    try: os.chdir(_target)
    except Exception: pass

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

def _apply_compatibility_fixes():
    try:
        import jinja2
        if not hasattr(jinja2, 'Markup'):
            try:
                from markupsafe import Markup, escape
                jinja2.Markup = Markup
                if not hasattr(jinja2, 'escape'):
                    jinja2.escape = escape
            except Exception:
                pass
    except ImportError:
        pass
    try:
        import collections as _collections, collections.abc as _abc
        for _n in ('Mapping','MutableMapping','Sequence','Iterable','Container',
                   'MutableSequence','Set','MutableSet','Iterator','Generator','Callable','Collection'):
            if not hasattr(_collections, _n) and hasattr(_abc, _n):
                setattr(_collections, _n, getattr(_abc, _n))
    except Exception:
        pass
    try:
        import marshmallow as _mm
        if not hasattr(_mm, "__version__"):
            _mm.__version__ = "4"
    except Exception:
        pass

_apply_compatibility_fixes()

# Minimal, safe Django bootstrap. If anything goes wrong, skip the module (repo-agnostic).
try:
    import django
    from django.conf import settings as _dj_settings
    from django import apps as _dj_apps

    if not _dj_settings.configured:
        _cfg = dict(
            DEBUG=True,
            SECRET_KEY='pytest-secret',
            DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
            INSTALLED_APPS=[
                'django.contrib.auth','django.contrib.contenttypes',
                'django.contrib.sessions','django.contrib.messages'
            ],
            MIDDLEWARE=[
                'django.middleware.security.SecurityMiddleware',
                'django.contrib.sessions.middleware.SessionMiddleware',
                'django.middleware.common.CommonMiddleware',
            ],
            USE_TZ=True, TIME_ZONE='UTC',
        )
        try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
        except Exception: pass
        try: _dj_settings.configure(**_cfg)
        except Exception: pass

    if not _dj_apps.ready:
        try: django.setup()
        except Exception: pass

    # Probe a known Django core that previously crashed on some stacks.
    try:
        import django.contrib.auth.base_user as _dj_probe  # noqa
    except Exception as _e:
        _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
except Exception as _e:
    # Do NOT crash the entire test session â€“ make the module opt-out.
    _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)


# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import pytest
    from types import SimpleNamespace
    from unittest import mock
    from conduit.apps.profiles import serializers as profiles_serializers
    from conduit.apps.profiles import models as profiles_models
    from conduit.apps.articles import serializers as articles_serializers
    from conduit.apps.articles import signals as articles_signals
except ImportError:
    import pytest
    pytest.skip("required modules for integration tests not available", allow_module_level=True)


@pytest.mark.parametrize(
    "image_value,is_following_result",
    [
        ("http://example.com/img.png", True),
        (None, False),
    ],
)
def test_profile_serializers_get_image_and_get_following_calls_is_following(
    # Arrange-Act-Assert: generated by ai-testgen
    monkeypatch, image_value, is_following_result
):
    # Arrange: create a "profile owner" and a "request user" and serializer context
    owner = SimpleNamespace(username="owner", image=image_value)
    request_user = SimpleNamespace(username="requester")
    serializer_self = SimpleNamespace(context={"request": SimpleNamespace(user=request_user)})

    # Replace the lower-level is_following function with a spy that returns the parametrized value.
    is_following_spy = mock.Mock(return_value=is_following_result)
    monkeypatch.setattr(profiles_models, "is_following", is_following_spy, raising=False)

    # Act: call serializer helper methods (they are typically methods; pass serializer_self as self)
    img_result = profiles_serializers.get_image(serializer_self, owner)
    following_result = profiles_serializers.get_following(serializer_self, owner)

    # Assert: the image resolver returns the underlying image attribute (type and value) and following queried lower-level API
    assert img_result is image_value or img_result == image_value
    assert isinstance(img_result, (type(image_value),))  # concrete type check (None or str)
    assert following_result is is_following_result
    assert is_following_spy.call_count == 1


def test_article_serializer_get_favorited_uses_profiles_has_favorited_and_count_reflects_favorited_by():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange: create a fake article object whose favorited_by provides a count()
    favorited_by_mock = mock.Mock()
    favorited_by_mock.count.return_value = 3
    article = SimpleNamespace(title="Test", favorited_by=favorited_by_mock)

    # Create a fake request.user that will be passed via serializer context
    request_user = SimpleNamespace(username="u1")
    serializer_self = SimpleNamespace(context={"request": SimpleNamespace(user=request_user)})

    # Spy on profiles_models.has_favorited to ensure it's called and to control its return value
    has_fav_spy = mock.Mock(return_value=True)
    # Patch the function in the profiles models module
    setattr(profiles_models, "has_favorited", has_fav_spy)

    # Act: call the ArticleSerializer helper methods (pass serializer_self as self)
    favorited_flag = articles_serializers.get_favorited(serializer_self, article)
    favorites_count = articles_serializers.get_favorites_count(None, article)

    # Assert: the serializer used the profiles.has_favorited hook and returned correct values based on underlying state
    assert favorited_flag is True
    assert has_fav_spy.call_count == 1
    # Ensure called with a user and the article (don't enforce order of args)
    assert any(request_user is arg or article is arg for call_args in has_fav_spy.call_args_list for arg in call_args[0])

    assert isinstance(favorites_count, _exc_lookup("int", Exception))
    assert favorites_count == 3


@pytest.mark.parametrize("initial_slug", [None, "existing-slug"])
def test_add_slug_to_article_if_not_exists_creates_or_preserves_slug(initial_slug):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange: an article-like object with a title; slug may be pre-populated
    article = SimpleNamespace(title="Hello World SlugTest", slug=initial_slug)

    # Act: call the signal handler as Django would (sender, instance)
    # Many signal handlers accept (sender, instance, **kwargs)
    # Provide None as sender to simulate direct invocation
    articles_signals.add_slug_to_article_if_not_exists(sender=None, instance=article)

    # Assert: if slug was None it should now be a non-empty string; if it existed it should remain unchanged
    assert isinstance(article.slug, str)
    assert article.slug != ""  # non-empty
    if initial_slug is None:
        # New slug should reflect some normalization of the title (lowercase fragment expected)
        assert "hello" in article.slug.lower()
    else:
        assert article.slug == initial_slug
