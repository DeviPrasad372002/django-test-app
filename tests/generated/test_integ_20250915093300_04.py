import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import pytest
    from types import SimpleNamespace

    from conduit.apps.articles import signals as article_signals
    from conduit.apps.articles import relations as article_relations
    from conduit.apps.core import utils as core_utils
except ImportError:
    import pytest
    pytest.skip("Required application modules not available", allow_module_level=True)


def _make_dummy_article(title="My Title", slug=None):
    class DummyArticle:
        def __init__(self, title, slug):
            self.title = title
            self.slug = slug

        def __repr__(self):
            return f"<DummyArticle title={self.title!r} slug={self.slug!r}>"

    return DummyArticle(title, slug)


@pytest.mark.parametrize(
    "initial_slug,rand_value,slugified,title_expect",
    [
        (None, "RND123", "some-title", "some-title-RND123"),  # normal: adds slug
        ("existing-slug", "SHOULDNOTUSE", "ignored", "existing-slug"),  # edge: keeps existing slug
    ],
)
def test_add_slug_to_article_if_not_exists_behaviour(monkeypatch, initial_slug, rand_value, slugified, title_expect):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    article = _make_dummy_article(title="Some Title", slug=initial_slug)

    # Monkeypatch generate_random_string to deterministic value
    monkeypatch.setattr(core_utils, "generate_random_string", lambda length=6: rand_value, raising=False)

    # The signals module likely uses django.utils.text.slugify; monkeypatch the symbol in the signals module
    # to guarantee deterministic slugification.
    monkeypatch.setattr(article_signals, "slugify", lambda txt: slugified, raising=False)

    # Act
    # The real function signature is (sender, instance, **kwargs) â€” call accordingly.
    article_signals.add_slug_to_article_if_not_exists(sender=None, instance=article)

    # Assert
    assert article.slug == title_expect
    # type check
    assert isinstance(article.slug, str)


@pytest.mark.parametrize(
    "input_value,expect_name,expect_error",
    [
        ("tag-one", "tag-one", None),   # normal tag string
        ("", "", None),                 # edge: empty string becomes tag with empty name
        (123, None, (TypeError, ValueError)),  # error path: non-string input should raise
    ],
)
def test_tagrelatedfield_to_internal_and_representation(monkeypatch, input_value, expect_name, expect_error):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # Create a fake Tag class used by the relations module.
    class DummyTag:
        def __init__(self, name):
            self.name = name

        def __repr__(self):
            return f"<DummyTag {self.name!r}>"

    # Provide an objects manager with get_or_create signature used by the field
    dummy_manager = SimpleNamespace(get_or_create=lambda **kwargs: (DummyTag(kwargs.get("name")), True))

    DummyTag.objects = dummy_manager

    # Monkeypatch the Tag name in the relations module to our DummyTag class
    monkeypatch.setattr(article_relations, "Tag", DummyTag, raising=False)

    # Instantiate the TagRelatedField
    field = article_relations.TagRelatedField()

    # Act / Assert
    if expect_error is not None:
        with pytest.raises(expect_error):
            field.to_internal_value(input_value)
    else:
        internal = field.to_internal_value(input_value)
        # Assert the returned internal value is our DummyTag instance with expected name
        assert isinstance(internal, DummyTag)
        assert getattr(internal, "name") == expect_name

        # to_representation should return the tag name
        rep = field.to_representation(internal)
        assert isinstance(rep, str)
        assert rep == expect_name
