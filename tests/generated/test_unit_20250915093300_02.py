import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import pytest
    from conduit.apps.authentication import models as auth_models
    from conduit.apps.core import utils as core_utils
except ImportError:
    import pytest
    pytest.skip("Required project modules not importable", allow_module_level=True)


@pytest.mark.parametrize("length", [8, 16])
def test_generate_random_string_length_and_uniqueness(length):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # Act
    s1 = core_utils.generate_random_string(length)
    s2 = core_utils.generate_random_string(length)
    # Assert
    assert isinstance(s1, str)
    assert isinstance(s2, str)
    assert len(s1) == length
    assert len(s2) == length
    # Ensure reasonable randomness: two subsequent calls should not produce equal results
    assert s1 != s2


def test_user_get_full_name_and_token(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    user = auth_models.User(first_name="Alice", last_name="Smith")
    # Replace the JWT generation to be deterministic for the test
    monkeypatch.setattr(user, "_generate_jwt_token", lambda: "FIXED_TOKEN", raising=False)

    # Act
    full_name = user.get_full_name()
    token = user.token

    # Assert
    assert isinstance(full_name, str)
    assert full_name == "Alice Smith"
    assert isinstance(token, str)
    assert token == "FIXED_TOKEN"

    # Edge case: only first_name present
    user2 = auth_models.User(first_name="Bob", last_name="")
    # Act
    full_name2 = user2.get_full_name()
    # Assert: concrete expected output when last_name empty is the first_name alone
    assert full_name2 == "Bob"


def test_user_manager_create_user_normal_and_missing_email():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    manager = auth_models.UserManager()

    created_instances = []

    class DummyUser:
        saved_instance = None

        def __init__(self, email=None, **kwargs):
            # record what was passed in
            self.email = email
            self.kwargs = kwargs
            self.password = None

        def set_password(self, raw):
            # emulate hashing
            self.password = "hashed:" + (raw or "")

        def save(self, *args, **kwargs):
            DummyUser.saved_instance = self
            created_instances.append(self)

    manager.model = DummyUser

    # Act - normal creation
    u = manager.create_user(email="TEST@EX.COM", password="secret", first_name="T")
    # Assert
    assert DummyUser.saved_instance is not None
    saved = DummyUser.saved_instance
    assert isinstance(saved.email, str)
    # Normalize: user managers usually lowercase the domain only; assert domain lowercased and local preserved
    local, domain = saved.email.split("@")
    assert domain == "ex.com"
    assert local == "TEST"
    assert saved.password == "hashed:secret"
    assert saved.kwargs.get("first_name") == "T"

    # Act & Assert - missing email should raise a ValueError
    with pytest.raises(ValueError):
        manager.create_user(email=None, password="x")


def test_user_manager_create_superuser_flags_and_error_on_invalid(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    manager = auth_models.UserManager()

    class DummyUser:
        saved_instance = None

        def __init__(self, email=None, **kwargs):
            self.email = email
            self.kwargs = kwargs
            self.password = None

        def set_password(self, raw):
            self.password = "hashed:" + (raw or "")

        def save(self, *args, **kwargs):
            DummyUser.saved_instance = self

    manager.model = DummyUser

    # Act - normal superuser creation
    manager.create_superuser(email="admin@example.COM", password="adminpass")
    saved = DummyUser.saved_instance
    # Assert - manager should ensure is_staff and is_superuser are True
    assert saved is not None
    # Flags are commonly passed in kwargs or set on the model; check kwargs for presence
    assert saved.kwargs.get("is_staff", True) is True
    assert saved.kwargs.get("is_superuser", True) is True

    # Act & Assert - explicit False flags should cause a ValueError
    with pytest.raises(ValueError):
        manager.create_superuser(email="bad@example.com", password="x", is_superuser=False)
