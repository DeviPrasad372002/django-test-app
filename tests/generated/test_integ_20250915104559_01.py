import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import pytest
    import datetime
    from types import SimpleNamespace
    from conduit.apps.articles.models import Article
    from conduit.apps.articles.signals import add_slug_to_article_if_not_exists
    from conduit.apps.articles.serializers import ArticleSerializer
    from conduit.apps.authentication import models as auth_models_module
    from conduit.apps.authentication.models import User
except ImportError:
    import pytest
    pytest.skip("Required project modules are not available", allow_module_level=True)


def test_add_slug_to_article_if_not_exists_and_str():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # create an Article instance without a slug (do not save to DB)
    article = Article(title="Integration Test Article")
    # ensure initial state - slug may be None or empty
    initial_slug = getattr(article, "slug", None)

    # Act
    add_slug_to_article_if_not_exists(sender=Article, instance=article)

    # Assert
    # slug should be created/populated on the instance
    assert getattr(article, "slug", None), "Expected slug to be set on article instance"
    assert isinstance(article.slug, str), "Expected slug to be a string"
    # __str__ should return the title
    assert str(article) == "Integration Test Article"


@pytest.mark.parametrize(
    "first_name,last_name,expected_full,expected_short",
    [
        ("Alice", "Smith", "Alice Smith", "Alice"),
        ("", "Jones", " Jones".strip(), ""),  # edge: empty first name
    ],
)
def test_user_token_and_name_methods(monkeypatch, first_name, last_name, expected_full, expected_short):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # Create a lightweight User instance without database persistence
    user = User()
    user.username = "tester"
    user.email = "tester@example.com"
    user.first_name = first_name
    user.last_name = last_name

    # Monkeypatch the jwt.encode used by the authentication models to avoid external dependency
    def fake_jwt_encode(payload, key, algorithm):
        # Inspect payload to ensure token generation receives an 'id' or similar
        assert isinstance(payload, dict)
        assert "exp" in payload or True  # allow presence/absence depending on implementation
        return "mocked.jwt.token"

    # The models module likely imported jwt as a module-level name; replace its encode function
    if hasattr(auth_models_module, "jwt"):
        monkeypatch.setattr(auth_models_module.jwt, "encode", fake_jwt_encode, raising=False)
    else:
        # If jwt not present on module, try setting attribute directly to be safe
        auth_models_module.jwt = SimpleNamespace(encode=fake_jwt_encode)

    # Act
    token_value = user.token  # property that should call _generate_jwt_token internally
    full_name = user.get_full_name()
    short_name = user.get_short_name()

    # Assert
    assert token_value == "mocked.jwt.token"
    assert isinstance(token_value, str)
    assert full_name == expected_full
    assert short_name == expected_short


@pytest.mark.parametrize(
    "created_at, expect_error",
    [
        (datetime.datetime(2020, 1, 1, 12, 0, 0), False),
        (None, True),  # edge: missing created_at should produce an error path
    ],
)
def test_article_serializer_get_created_and_updated_methods(created_at, expect_error):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    serializer = ArticleSerializer()
    # Create a fake article-like object with created_at and updated_at
    class FakeArticle:
        pass

    obj = FakeArticle()
    obj.created_at = created_at
    # set updated_at to a valid datetime if created_at is valid, else None
    obj.updated_at = datetime.datetime(2021, 6, 1, 15, 30, 0) if created_at is not None else None

    # Act / Assert
    if expect_error:
        with pytest.raises(Exception):
            # attempt to get created_at should raise due to None (verify error path)
            serializer.get_created_at(obj)
    else:
        created_iso = serializer.get_created_at(obj)
        updated_iso = serializer.get_updated_at(obj)
        # Assert outputs are ISO formatted strings
        assert isinstance(created_iso, str)
        assert created_iso.startswith("2020-01-01")
        assert isinstance(updated_iso, str)
        assert updated_iso.startswith("2021-06-01")
