import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import pytest
    import importlib
    utils = importlib.import_module('conduit.apps.core.utils')
    auth_models = importlib.import_module('conduit.apps.authentication.models')
    core_exceptions = importlib.import_module('conduit.apps.core.exceptions')
    rest_response = importlib.import_module('rest_framework.response')
    rest_exceptions = importlib.import_module('rest_framework.exceptions')
except ImportError as e:
    import pytest
    pytest.skip(f"Skipping tests because import failed: {e}", allow_module_level=True)


@pytest.mark.parametrize("length,expected", [
    (5, "aaaaa"),
    (0, ""),
])
def test_generate_random_string_uses_random_choice_predictably(monkeypatch, length, expected):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange: force the random.choice used inside the module to always return 'a'
    monkeypatch.setattr(utils.random, "choice", lambda seq: "a")
    # Act
    result = utils.generate_random_string(length)
    # Assert
    assert isinstance(result, str)
    assert result == expected
    assert len(result) == length


@pytest.mark.parametrize("encoded_value", ["STATIC_TOKEN_VALUE", b"STATIC_TOKEN_BYTES"])
def test__generate_jwt_token_encodes_user_id_and_returns_token(monkeypatch, encoded_value):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange: create a lightweight User instance and capture payload passed to jwt.encode
    user = auth_models.User()
    user.pk = 12345

    captured = {}

    def fake_encode(payload, key, algorithm="HS256"):
        captured["payload"] = payload
        return encoded_value

    # Patch the jwt.encode used in the authentication.models module
    monkeypatch.setattr(auth_models, "jwt", auth_models.jwt)  # ensure module exists
    monkeypatch.setattr(auth_models.jwt, "encode", fake_encode)

    # Act
    token = user._generate_jwt_token()

    # Assert: token is returned (bytes or str) and payload contains the user's id under a sensible key
    assert isinstance(token, (str, bytes))
    assert "payload" in captured and isinstance(captured["payload"], dict)
    payload = captured["payload"]
    # Accept either 'id' or 'user_id' as common conventions, and expect an expiry key present
    assert (payload.get("id") == user.pk) or (payload.get("user_id") == user.pk)
    assert ("exp" in payload) or any(k.lower().startswith("exp") for k in payload.keys())


def test_handle_not_found_and_generic_errors_return_responses_with_expected_status_and_structure():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange: create example exceptions
    not_found_exc = rest_exceptions.NotFound(detail="missing")
    generic_exc = Exception("boom")

    # Act
    resp_not_found = core_exceptions._handle_not_found_error(not_found_exc)
    resp_generic = core_exceptions._handle_generic_error(generic_exc)

    # Assert: both return DRF Response-like objects with status codes and dict data
    assert isinstance(resp_not_found, rest_response.Response)
    assert isinstance(resp_generic, rest_response.Response)

    # Not found should be 404
    assert resp_not_found.status_code == 404
    assert isinstance(resp_not_found.data, dict)
    assert resp_not_found.data  # should not be empty

    # Generic handler should indicate server error (500) or at least be >=500
    assert isinstance(resp_generic.status_code, int)
    assert resp_generic.status_code >= 500
    assert isinstance(resp_generic.data, dict)
    assert resp_generic.data  # should not be empty
