import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

import os, sys, types as _types, pytest as _pytest, warnings
warnings.filterwarnings('ignore', category=DeprecationWarning)
warnings.filterwarnings('ignore', category=PendingDeprecationWarning)
_t = os.environ.get('TARGET_ROOT') or 'target'
if _t and os.path.isdir(_t):
    _p = os.path.abspath(os.path.join(_t, os.pardir))
    [sys.path.insert(0, p) for p in (_p,_t) if p not in sys.path]
    _pkg=_types.ModuleType('target'); _pkg.__path__=[_t]; sys.modules.setdefault('target', _pkg)

import pytest

try:
    from conduit.apps.articles.signals import add_slug_to_article_if_not_exists
    from conduit.apps.core.exceptions import core_exception_handler, _handle_not_found_error
    from rest_framework.exceptions import NotFound
    from rest_framework.response import Response
except ImportError:
    pytest.skip("Required project or third-party packages are not available", allow_module_level=True)


class DummyArticle:
    def __init__(self, title, slug=None):
        self.title = title
        self.slug = slug


@pytest.mark.parametrize(
    "title",
    [
        "My Awesome Article",  # normal title -> expect slugified content present
        "",  # edge: empty title -> expect slug generated (non-empty) to avoid blank slug
    ],
)
def test_add_slug_to_article_if_not_exists_creates_slug_when_missing(title):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    article = DummyArticle(title=title, slug=None)

    # Act
    add_slug_to_article_if_not_exists(sender=None, instance=article)

    # Assert
    assert isinstance(article.slug, str)
    assert article.slug != ""  # ensures something was generated
    assert " " not in article.slug  # slug should have no spaces
    # If title non-empty, expect at least part of title present in slug (lowercased)
    if title:
        first_word = title.split()[0].lower()
        assert first_word in article.slug


def test_add_slug_to_article_if_not_exists_preserves_existing_slug():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    existing = "existing-slug-123"
    article = DummyArticle(title="Ignored Title", slug=existing)

    # Act
    add_slug_to_article_if_not_exists(sender=None, instance=article)

    # Assert
    assert article.slug == existing  # should not overwrite existing slug


def test_core_exception_handler_returns_response_for_not_found():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    exc = NotFound(detail="Resource not found")
    context = {}

    # Act
    resp = core_exception_handler(exc, context)

    # Assert
    assert isinstance(resp, Response)
    assert getattr(resp, "status_code", None) == 404
    assert isinstance(resp.data, dict)


def test__handle_not_found_error_returns_404_response():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    exc = NotFound()

    # Act
    resp = _handle_not_found_error(exc)

    # Assert
    assert isinstance(resp, Response)
    assert resp.status_code == 404
    assert isinstance(resp.data, dict)
