import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.exists(_target):
    if _target not in sys.path: sys.path.insert(0, _target)
    try: os.chdir(_target)
    except Exception: pass

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

def _apply_compatibility_fixes():
    try:
        import jinja2
        if not hasattr(jinja2, 'Markup'):
            try:
                from markupsafe import Markup, escape
                jinja2.Markup = Markup
                if not hasattr(jinja2, 'escape'):
                    jinja2.escape = escape
            except Exception:
                pass
    except ImportError:
        pass
    try:
        import collections as _collections, collections.abc as _abc
        for _n in ('Mapping','MutableMapping','Sequence','Iterable','Container',
                   'MutableSequence','Set','MutableSet','Iterator','Generator','Callable','Collection'):
            if not hasattr(_collections, _n) and hasattr(_abc, _n):
                setattr(_collections, _n, getattr(_abc, _n))
    except Exception:
        pass
    try:
        import marshmallow as _mm
        if not hasattr(_mm, "__version__"):
            _mm.__version__ = "4"
    except Exception:
        pass

_apply_compatibility_fixes()

# Minimal, safe Django bootstrap. If anything goes wrong, skip the module (repo-agnostic).
try:
    import django
    from django.conf import settings as _dj_settings
    from django import apps as _dj_apps

    if not _dj_settings.configured:
        _cfg = dict(
            DEBUG=True,
            SECRET_KEY='pytest-secret',
            DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
            INSTALLED_APPS=[
                'django.contrib.auth','django.contrib.contenttypes',
                'django.contrib.sessions','django.contrib.messages'
            ],
            MIDDLEWARE=[
                'django.middleware.security.SecurityMiddleware',
                'django.contrib.sessions.middleware.SessionMiddleware',
                'django.middleware.common.CommonMiddleware',
            ],
            USE_TZ=True, TIME_ZONE='UTC',
        )
        try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
        except Exception: pass
        try: _dj_settings.configure(**_cfg)
        except Exception: pass

    if not _dj_apps.ready:
        try: django.setup()
        except Exception: pass

    # Probe a known Django core that previously crashed on some stacks.
    try:
        import django.contrib.auth.base_user as _dj_probe  # noqa
    except Exception as _e:
        _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
except Exception as _e:
    # Do NOT crash the entire test session â€“ make the module opt-out.
    _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)


# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import pytest
    import importlib
    from types import SimpleNamespace
    from unittest import mock
except ImportError:  # pragma: no cover
    import pytest
    pytest.skip("pytest or stdlib types not available", allow_module_level=True)

try:
    signals = importlib.import_module('conduit.apps.articles.signals')
    backends = importlib.import_module('conduit.apps.authentication.backends')
except ImportError:  # pragma: no cover
    pytest.skip("target modules not available", allow_module_level=True)


@pytest.mark.parametrize(
    "title",
    [
        "Hello World",
        "Complex Title!! 123 --- With SYMBOLS",
    ],
)
def test_add_slug_to_article_if_not_exists_creates_slug_and_saves(monkeypatch, title):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    class DummyArticle:
        def __init__(self, title, slug=None):
            self.title = title
            self.slug = slug
            self._saved = False

        def save(self, *args, **kwargs):
            # emulate model save
            self._saved = True

    article = DummyArticle(title=title, slug=None)

    # Act
    # Typical signal signature: sender, instance, created, **kwargs
    signals.add_slug_to_article_if_not_exists(None, article, True)

    # Assert
    # slug should be set and save should have been called
    assert hasattr(article, "slug"), "article must have a slug attribute set"
    assert article.slug is not None and isinstance(article.slug, str)
    assert article._saved is True
    # basic sanity on slug content: slugify should produce hyphens for multiword titles
    assert "-" in article.slug or len(article.slug) > 0


@pytest.mark.parametrize(
    "existing_slug",
    [
        "already-exists",
        "non-empty-slug-123",
    ],
)
def test_add_slug_to_article_if_not_exists_does_nothing_when_slug_present(existing_slug):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    class DummyArticle:
        def __init__(self, title, slug=None):
            self.title = title
            self.slug = slug
            self._saved = False

        def save(self, *args, **kwargs):
            self._saved = True

    article = DummyArticle(title="Some Title", slug=existing_slug)

    # Act
    signals.add_slug_to_article_if_not_exists(None, article, True)

    # Assert
    # slug should remain unchanged and save should not have been called
    assert article.slug == existing_slug
    assert article._saved is False


@pytest.mark.parametrize(
    "auth_header, expected",
    [
        ("Token abc123", ("user_obj", "abc123")),
        ("Token 0", ("user_obj", "0")),
    ],
)
def test_jwt_authenticate_calls_internal_authenticate_and_returns_user(monkeypatch, auth_header, expected):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    request = SimpleNamespace(META={"HTTP_AUTHORIZATION": auth_header})
    backend = backends.JWTAuthentication()

    # Monkeypatch jwt.decode inside the backend module to return a predictable payload
    monkeypatch.setattr(
        backends,
        "jwt",
        SimpleNamespace(decode=lambda token, key=None, algorithms=None: {"user_id": 1}),
        raising=False,
    )

    # Replace the instance method _authenticate_credentials to observe inputs and return expected user/token
    called = {}

    def fake_authenticate_credentials(token, payload):
        called["token"] = token
        called["payload"] = payload
        return ("user_obj", token)

    # set on the instance so the callable signature does not receive 'self'
    monkeypatch.setattr(backend, "_authenticate_credentials", fake_authenticate_credentials, raising=False)

    # Act
    result = backend.authenticate(request)

    # Assert
    assert result == expected
    assert called["token"] == expected[1]
    assert isinstance(called["payload"], dict)
    assert "user_id" in called["payload"]


@pytest.mark.parametrize(
    "meta, description",
    [
        ({}, "no authorization header present"),
        ({"HTTP_AUTHORIZATION": ""}, "empty authorization header"),
        ({"HTTP_AUTHORIZATION": "Bearer tokenvalue"}, "unsupported prefix"),
    ],
)
def test_jwt_authenticate_returns_none_for_missing_or_invalid_header(meta, description):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    request = SimpleNamespace(META=meta)
    backend = backends.JWTAuthentication()

    # Ensure jwt.decode is not called accidentally (it would raise if called)
    monkeypatch = mock.MagicMock()
    # Attach a dummy decode that would raise if invoked to detect unexpected calls
    monkeypatch_decode = lambda *args, **kwargs: (_ for _ in ()).throw(RuntimeError("jwt.decode should not be called"))
    # apply to the module object if available
    try:
        setattr(backends, "jwt", SimpleNamespace(decode=monkeypatch_decode))
    except Exception:
        # best-effort: ignore if we cannot set; test still valid for header checks
        pass

    # Act
    result = backend.authenticate(request)

    # Assert
    assert result is None, f"authenticate should return None when {description}"
