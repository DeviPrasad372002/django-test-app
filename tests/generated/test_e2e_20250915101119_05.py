import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import pytest
    from conduit.apps.articles.renderers import ArticleJSONRenderer, CommentJSONRenderer
    from conduit.apps.core.utils import generate_random_string
except ImportError as e:
    import pytest
    pytest.skip("Skipping tests because a required import failed: {}".format(e), allow_module_level=True)


@pytest.mark.parametrize(
    "data, expected_key, expected_values",
    [
        ({"title": "hello-world"}, '"article"', ["hello-world"]),
        ([{"title": "a"}, {"title": "b"}], '"articles"', ["a", "b"]),
    ],
)
def test_article_json_renderer_wraps_payload_and_includes_titles(data, expected_key, expected_values):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange: create renderer instance and ensure input is ready
    renderer = ArticleJSONRenderer()
    assert renderer is not None

    # Act: render the provided payload
    rendered = renderer.render(data)

    # Assert: output is bytes (or str), contains the expected wrapper key and the data values
    assert isinstance(rendered, (bytes, str)), "Rendered output should be bytes or str"
    text = rendered.decode() if isinstance(rendered, bytes) else rendered
    assert expected_key in text, "Renderer did not include expected root key"
    for val in expected_values:
        assert val in text, f"Rendered output missing expected value '{val}'"


@pytest.mark.parametrize(
    "data, expected_key, expected_values",
    [
        ({"body": "nice article"}, '"comment"', ["nice article"]),
        ([{"body": "c1"}, {"body": "c2"}], '"comments"', ["c1", "c2"]),
    ],
)
def test_comment_json_renderer_wraps_payload_and_includes_bodies(data, expected_key, expected_values):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    renderer = CommentJSONRenderer()
    assert renderer is not None

    # Act
    rendered = renderer.render(data)

    # Assert
    assert isinstance(rendered, (bytes, str))
    text = rendered.decode() if isinstance(rendered, bytes) else rendered
    assert expected_key in text
    for val in expected_values:
        assert val in text


def test_generate_random_string_monkeypatched_for_determinism_and_errors(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange: monkeypatch random.choice to always return 'x' for predictability
    import random

    monkeypatch.setattr(random, "choice", lambda seq: "x")

    # Act & Assert (normal case)
    result = generate_random_string(5)
    assert isinstance(result, str)
    assert result == "xxxxx"

    # Act & Assert (edge case length 0)
    result_zero = generate_random_string(0)
    assert isinstance(result_zero, str)
    assert result_zero == ""

    # Act & Assert (error path: non-integer length should raise a TypeError)
    with pytest.raises(TypeError):
        generate_random_string("not-an-int")
