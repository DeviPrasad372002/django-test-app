import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

import os, sys, types as _types, pytest as _pytest, warnings
warnings.filterwarnings('ignore', category=DeprecationWarning)
warnings.filterwarnings('ignore', category=PendingDeprecationWarning)
_t = os.environ.get('TARGET_ROOT') or 'target'
if _t and os.path.isdir(_t):
    _p = os.path.abspath(os.path.join(_t, os.pardir))
    [sys.path.insert(0, p) for p in (_p,_t) if p not in sys.path]
    _pkg=_types.ModuleType('target'); _pkg.__path__=[_t]; sys.modules.setdefault('target', _pkg)

try:
    import pytest
    from conduit.apps.core.utils import generate_random_string
    from conduit.apps.authentication.models import User, UserManager
except ImportError:
    import pytest
    pytest.skip("Skipping tests; required packages or application modules are unavailable", allow_module_level=True)


@pytest.mark.parametrize("length", [0, 1, 16, 64])
def test_generate_random_string_returns_expected_length_and_characters(length):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange: length parameter provided by parametrize
    # Act
    result = generate_random_string(length)
    # Assert
    assert isinstance(result, str)
    assert len(result) == length
    # If length > 0 assert characters are drawn from ascii letters and digits
    import string
    allowed = set(string.ascii_letters + string.digits)
    for ch in result:
        assert ch in allowed


def test_user_get_full_name_short_name_and_token_monkeypatched(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    user = User(email="tester@example.com", username="tester123")
    # Replace the internal token generator to avoid dependencies on jwt/config
    monkeypatch.setattr(User, "_generate_jwt_token", lambda self: "fake.jwt.token", raising=False)

    # Act
    full = user.get_full_name()
    short = user.get_short_name()
    token_value = user.token

    # Assert
    assert isinstance(full, str)
    assert "tester@example.com" in full or full == "tester@example.com"
    assert short == "tester123"
    assert isinstance(token_value, str)
    assert token_value == "fake.jwt.token"


def test_create_user_without_email_raises_value_error():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    manager = UserManager()

    # Act / Assert
    with pytest.raises(ValueError):
        manager.create_user(email="", username="noemail", password="pw")


def test_create_superuser_uses_create_user_and_sets_flags(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    manager = UserManager()

    class DummyUser:
        def __init__(self):
            self.is_staff = False
            self.is_superuser = False
            self.is_active = False
            self.email = None
            self.username = None

    created = DummyUser()

    def fake_create_user(email, username, password=None):
        # simulate returned object from create_user
        created.email = email
        created.username = username
        return created

    monkeypatch.setattr(manager, "create_user", fake_create_user, raising=False)

    # Act
    result = manager.create_superuser(email="admin@example.com", username="admin", password="adminpw")

    # Assert
    assert result is created
    assert result.email == "admin@example.com"
    assert result.username == "admin"
    # create_superuser should set these flags to True
    assert getattr(result, "is_staff") is True
    assert getattr(result, "is_superuser") is True
    assert getattr(result, "is_active") is True
