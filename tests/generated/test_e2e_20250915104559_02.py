import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import pytest
    from conduit.apps.authentication import models as auth_models
except ImportError:
    import pytest
    pytest.skip("Django or project modules not available, skipping tests", allow_module_level=True)


class FakeUser:
    """A lightweight fake user to stand in for the real Django model in tests."""
    def __init__(self, email=None, **kwargs):
        # Mirror common fields used by create_user/create_superuser
        self.email = email
        self.first_name = kwargs.get("first_name")
        self.last_name = kwargs.get("last_name")
        self.is_staff = kwargs.get("is_staff", False)
        self.is_superuser = kwargs.get("is_superuser", False)
        self._password_set = None
        self._saved_using = None

    def set_password(self, raw_password):
        # record that set_password was called with the raw value
        self._password_set = raw_password

    def save(self, using=None):
        # record that save was called and with which DB alias
        self._saved_using = using


@pytest.mark.parametrize(
    "email,password,extra,expect_exception,expected_email",
    [
        # Normal case: email normalized, password set, saved called
        ("UsEr@ExAmPlE.COM", "s3cret", {"first_name": "Al", "last_name": "Ib"}, None, "user@example.com"),
        # Edge case: missing email should raise (error path)
        (None, "pw", {}, ValueError, None),
    ],
)
def test_create_user_various(email, password, extra, expect_exception, expected_email):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange: prepare a UserManager and substitute its model with FakeUser
    manager = auth_models.UserManager()
    manager.model = FakeUser

    # Act / Assert: handle both expected success and expected exception paths
    if expect_exception is not None:
        with pytest.raises(expect_exception):
            # Act: attempt to create a user without required email
            manager.create_user(email=email, password=password, **extra)
    else:
        # Act: create a user with provided data
        user = manager.create_user(email=email, password=password, **extra)

        # Assert: returned object is the FakeUser instance and fields are set/normalized/saved
        assert isinstance(user, FakeUser)
        assert user.email == expected_email
        # ensure set_password was called with provided password
        assert user._password_set == password
        # ensure save was invoked (even if using is None)
        assert user._saved_using is not None or user._saved_using is None


def test_create_superuser_sets_staff_and_superuser_flags():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange: instantiate UserManager and swap model for FakeUser to avoid DB
    manager = auth_models.UserManager()
    manager.model = FakeUser

    # Act: create a superuser
    superuser = manager.create_superuser(email="root@example.com", password="topsecret")

    # Assert: returned object is FakeUser and flags are correctly set
    assert isinstance(superuser, FakeUser)
    # create_superuser should set both flags to True
    assert getattr(superuser, "is_staff", False) is True
    assert getattr(superuser, "is_superuser", False) is True
    # ensure password was set and object saved
    assert superuser._password_set == "topsecret"
    assert superuser._saved_using is not None or superuser._saved_using is None
