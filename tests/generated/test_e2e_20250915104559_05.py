import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

import pytest as _pytest
_pytest.skip('generator: banned private imports detected; skipping module', allow_module_level=True)

try:
    import pytest
    import json
    from types import SimpleNamespace
    from conduit.apps.articles.renderers import ArticleJSONRenderer, CommentJSONRenderer
    from conduit.apps.articles.signals import add_slug_to_article_if_not_exists
except ImportError as e:
    import pytest as _pytest
    _pytest.skip(f"Required modules not available: {e}", allow_module_level=True)


@pytest.mark.parametrize(
    "input_data, expected_key",
    [
        ({"title": "Test Article", "body": "content"}, "article"),   # normal dict payload
        ({}, "article"),                                               # edge: empty dict
    ],
)
def test_article_json_renderer_wraps_payload_under_article_key(input_data, expected_key):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    renderer = ArticleJSONRenderer()

    # Act
    rendered = renderer.render(input_data, accepted_media_type="application/json", renderer_context={})

    # Assert
    assert isinstance(rendered, (bytes, bytearray))
    decoded = rendered.decode("utf-8")
    parsed = json.loads(decoded)
    # Should wrap under "article" key exactly and preserve payload structure
    assert expected_key in parsed
    assert parsed[expected_key] == input_data


@pytest.mark.parametrize(
    "input_data, expected_key",
    [
        ({"id": 1, "body": "a comment"}, "comment"),         # single comment -> singular key
        ([{"id": 1}, {"id": 2}], "comments"),                 # list of comments -> plural key
    ],
)
def test_comment_json_renderer_uses_singular_and_plural_wrapping(input_data, expected_key):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    renderer = CommentJSONRenderer()

    # Act
    rendered = renderer.render(input_data, accepted_media_type="application/json", renderer_context={})

    # Assert
    assert isinstance(rendered, (bytes, bytearray))
    parsed = json.loads(rendered.decode("utf-8"))
    assert expected_key in parsed
    assert parsed[expected_key] == input_data


@pytest.mark.parametrize(
    "initial_slug, title, expected_startswith",
    [
        ("", "Hello World!", "hello-world"),           # empty slug -> should be generated from title
        (None, "Testing 123", "testing-123"),          # None slug -> generate
        ("existing-slug", "Should Not Change", "existing-slug"),  # existing slug preserved
    ],
)
def test_add_slug_to_article_if_not_exists_generates_or_preserves_slug(initial_slug, title, expected_startswith):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # Create a simple fake instance with title and slug attributes to simulate a Django model instance.
    inst = SimpleNamespace(title=title, slug=initial_slug)

    # Act
    # The signal handler signature is (sender, instance, **kwargs)
    add_slug_to_article_if_not_exists(sender=SimpleNamespace(), instance=inst)

    # Assert
    # If there was an existing slug (non-empty and non-None), it should remain exactly the same.
    if initial_slug not in (None, ""):
        assert inst.slug == initial_slug
    else:
        # Otherwise, ensure a slug was generated and it starts with a slugified version of the title.
        assert isinstance(inst.slug, str)
        assert inst.slug.startswith(expected_startswith)
