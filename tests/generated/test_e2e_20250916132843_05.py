import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

import os, sys, types as _types, pytest as _pytest, warnings
warnings.filterwarnings('ignore', category=DeprecationWarning)
warnings.filterwarnings('ignore', category=PendingDeprecationWarning)
_t = os.environ.get('TARGET_ROOT') or 'target'
if _t and os.path.isdir(_t):
    _p = os.path.abspath(os.path.join(_t, os.pardir))
    [sys.path.insert(0, p) for p in (_p,_t) if p not in sys.path]
    _pkg=_types.ModuleType('target'); _pkg.__path__=[_t]; sys.modules.setdefault('target', _pkg)

import pytest as _pytest
_pytest.skip('generator: banned private imports detected; skipping module', allow_module_level=True)

try:
    import pytest
    import datetime
    from conduit.apps.articles.renderers import ArticleJSONRenderer, CommentJSONRenderer
    from conduit.apps.articles.serializers import ArticleSerializer
except ImportError:
    import pytest as _pytest
    _pytest.skip("Required modules for tests not available", allow_module_level=True)


@pytest.mark.parametrize(
    "input_data, expected_snippets",
    [
        # normal single-article payload
        ({"title": "Test Article", "body": "Content"}, ['"article"', "Test Article", "Content"]),
        # nested structure in article
        ({"title": "Nested", "tags": ["a", "b"], "meta": {"views": 10}}, ['"article"', "Nested", "a", "b", "views"]),
    ],
)
def test_article_json_renderer_wraps_data_and_returns_bytes(input_data, expected_snippets):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    renderer = ArticleJSONRenderer()

    # Act
    rendered = renderer.render(input_data, accepted_media_type=None, renderer_context={})

    # Assert
    assert isinstance(rendered, (bytes, bytearray))
    text = rendered.decode("utf-8")
    for snippet in expected_snippets:
        assert snippet in text


@pytest.mark.parametrize(
    "input_data, expected_snippets",
    [
        # list of comments
        ([{"id": 1, "body": "Nice"}, {"id": 2, "body": "Cool"}], ['"comments"', "Nice", "Cool"]),
        # empty comments list
        ([], ['"comments"']),
    ],
)
def test_comment_json_renderer_wraps_list_and_returns_bytes(input_data, expected_snippets):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    renderer = CommentJSONRenderer()

    # Act
    rendered = renderer.render(input_data, accepted_media_type=None, renderer_context={})

    # Assert
    assert isinstance(rendered, (bytes, bytearray))
    text = rendered.decode("utf-8")
    for snippet in expected_snippets:
        assert snippet in text


@pytest.mark.parametrize(
    "obj, expect_error, expected_prefix",
    [
        # normal case: object has created_at attribute
        (type("O", (), {"created_at": datetime.datetime(2020, 1, 1, 12, 0, 0)} )(), False, "2020-01-01T12:00:00"),
        # error case: missing created_at should raise AttributeError
        (type("O", (), {} )(), True, None),
    ],
)
def test_article_serializer_get_created_at_handles_present_and_missing(obj, expect_error, expected_prefix):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    serializer = ArticleSerializer()

    # Act / Assert
    if expect_error:
        with pytest.raises(AttributeError):
            serializer.get_created_at(obj)
    else:
        result = serializer.get_created_at(obj)
        assert isinstance(result, str)
        assert result.startswith(expected_prefix)
