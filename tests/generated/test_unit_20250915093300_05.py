import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import pytest
    from conduit.apps.core import utils as utils_module
    from conduit.apps.articles import renderers as renderers_module
    from conduit.apps.articles import signals as signals_module
except ImportError:
    import pytest  # noqa: F401
    pytest.skip("Skipping tests: required third-party packages not available", allow_module_level=True)


def test_generate_random_string_various_lengths(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # Patch the random.choice used inside generate_random_string to be deterministic
    monkeypatch.setattr(utils_module.random, "choice", lambda seq: "Z")
    cases = [0, 1, 10]

    for length in cases:
        # Act
        result = utils_module.generate_random_string(length)

        # Assert
        assert isinstance(result, str)
        assert len(result) == length
        if length > 0:
            # All characters should be the patched 'Z'
            assert set(result) == {"Z"}
        else:
            assert result == ""


@pytest.mark.parametrize(
    "renderer_cls,input_data,expected_key",
    [
        (renderers_module.ArticleJSONRenderer, {"title": "Test"}, b'"article"'),
        (renderers_module.CommentJSONRenderer, {"body": "Nice"}, b'"comment"'),
    ],
)
def test_renderers_wrap_payload_under_expected_key(renderer_cls, input_data, expected_key):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    renderer = renderer_cls()

    # Act
    rendered = renderer.render(input_data)

    # Assert
    assert isinstance(rendered, (bytes, bytearray))
    # The payload should contain the expected wrapper key and at least one field/value
    assert expected_key in rendered
    for k, v in input_data.items():
        # keys and values should be present in the JSON bytes
        assert ("\"" + k + "\"").encode() in rendered
        # value may be string/int/etc; ensure representation present
        assert str(v).encode() in rendered


def test_add_slug_to_article_if_not_exists_creates_slug_when_missing(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    class DummyInstance:
        def __init__(self, title, slug=None):
            self.title = title
            self.slug = slug
            self.saved = False

        def save(self, *args, **kwargs):
            # Mark that save was called
            self.saved = True

    dummy = DummyInstance(title="Hello World", slug=None)

    # The signal handler likely imports generate_random_string at module level.
    # Patch the function on the signals module to control the suffix.
    monkeypatch.setattr(signals_module, "generate_random_string", lambda n=6: "abc123")

    # Act
    # Typical Django post_save signature: (sender, instance, created, **kwargs)
    signals_module.add_slug_to_article_if_not_exists(sender=None, instance=dummy, created=True)

    # Assert
    # slug should be generated from the title and the patched random string.
    # slugify('Hello World') -> 'hello-world' expected
    assert getattr(dummy, "slug") is not None
    assert isinstance(dummy.slug, str)
    assert dummy.slug.startswith("hello-world")
    assert dummy.slug.endswith("abc123")
    assert dummy.saved is True


def test_add_slug_to_article_if_not_exists_does_not_override_existing_slug(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    class DummyInstance:
        def __init__(self, title, slug):
            self.title = title
            self.slug = slug
            self.saved = False

        def save(self, *args, **kwargs):
            # If save is called unexpectedly, mark it
            self.saved = True

    existing_slug = "already-exists"
    dummy = DummyInstance(title="New Title", slug=existing_slug)

    # Ensure generate_random_string would produce something different if called
    monkeypatch.setattr(signals_module, "generate_random_string", lambda n=6: "should-not-be-used")

    # Act
    signals_module.add_slug_to_article_if_not_exists(sender=None, instance=dummy, created=True)

    # Assert
    # Existing slug should remain and save should not have been called by the handler
    assert dummy.slug == existing_slug
    assert dummy.saved is False
