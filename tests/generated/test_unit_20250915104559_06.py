import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import pytest
    import json
    from conduit.apps.authentication.renderers import UserJSONRenderer
    from conduit.apps.authentication.backends import JWTAuthentication
    from conduit.apps.authentication.serializers import LoginSerializer
    from rest_framework.exceptions import ValidationError
except ImportError:
    import pytest
    pytest.skip("Django/DRF or project modules not available for tests", allow_module_level=True)


class DummyRequest:
    def __init__(self, auth_value=None):
        # simple request-like object used by JWTAuthentication (reads META['HTTP_AUTHORIZATION'])
        self.META = {}
        if auth_value is not None:
            self.META['HTTP_AUTHORIZATION'] = auth_value


def test_user_json_renderer_wraps_user_key():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    renderer = UserJSONRenderer()
    user_data = {"email": "alice@example.com", "token": "secrettoken", "username": "alice"}

    # Act
    rendered = renderer.render(user_data)

    # Assert
    # renderer may return bytes or str depending on implementation; normalize to str
    if isinstance(rendered, bytes):
        rendered = rendered.decode("utf-8")
    parsed = json.loads(rendered)
    assert isinstance(parsed, dict)
    assert "user" in parsed, "renderer must wrap payload under 'user' key"
    assert parsed["user"] == user_data
    # Concrete type assertions
    assert isinstance(parsed["user"]["email"], str)
    assert parsed["user"]["email"] == "alice@example.com"
    assert parsed["user"]["token"] == "secrettoken"


def test_jwt_authentication_returns_none_when_no_authorization_header():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    backend = JWTAuthentication()
    request = DummyRequest()  # no Authorization header

    # Act
    result = backend.authenticate(request)

    # Assert
    # When no auth header is present, authentication should be skipped (None)
    assert result is None


def test_jwt_authentication_calls_authenticate_credentials(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    backend = JWTAuthentication()
    token_value = "header.payload.signature"
    request = DummyRequest(f"Token {token_value}")

    recorded = {}

    def fake_authenticate_credentials(self, token):
        # Act (inside fake)
        recorded["token"] = token
        # Return a typical (user, auth) tuple as DRF authentication classes do
        return ("mock_user_object", None)

    # Replace the real credential checker with our fake to avoid external dependencies like jwt decoding
    monkeypatch.setattr(JWTAuthentication, "_authenticate_credentials", fake_authenticate_credentials)

    # Act
    result = backend.authenticate(request)

    # Assert
    assert recorded.get("token") == token_value, "JWTAuthentication must pass the raw token (without prefix) to _authenticate_credentials"
    assert result == ("mock_user_object", None)
    assert isinstance(result, tuple) and len(result) == 2


@pytest.mark.parametrize(
    "input_data, expected_error_field",
    [
        ({}, "email"),  # missing both -> should include email (and likely password)
        ({"email": "not-an-email", "password": "x"}, "email"),  # invalid email form
        ({"email": "bob@example.com"}, "password"),  # missing password
    ],
)
def test_login_serializer_validation_errors(input_data, expected_error_field):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    serializer = LoginSerializer(data=input_data)

    # Act
    is_valid = serializer.is_valid()

    # Assert
    assert is_valid is False
    errors = serializer.errors
    assert expected_error_field in errors

    # Also assert that asking to raise will produce the proper ValidationError
    with pytest.raises(ValidationError):
        serializer.is_valid(raise_exception=True)
