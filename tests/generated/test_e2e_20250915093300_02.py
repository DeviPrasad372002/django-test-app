import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import pytest
    from types import SimpleNamespace

    from conduit.apps.authentication import backends as auth_backends
    from conduit.apps.authentication.backends import JWTAuthentication
    from conduit.apps.authentication.models import User
    from conduit.apps.articles.models import Comment
    from conduit.apps.articles.views import CommentsDestroyAPIView
    from conduit.apps import articles as articles_pkg
    from conduit.apps import authentication as authentication_pkg
    from conduit.apps import core as core_pkg
    from conduit.apps.core.exceptions import _handle_generic_error
    from conduit.apps.articles import views as articles_views
    from rest_framework import exceptions as drf_exceptions
except ImportError:
    import pytest
    pytest.skip("requires conduit project modules and DRF", allow_module_level=True)


def _dummy_request():
    # Minimal request-like object expected by authentication backend and views.
    return SimpleNamespace(META={}, user=None)


@pytest.mark.parametrize(
    "payload_user_active, expect_exception",
    [
        (True, False),   # normal case: active user -> authenticate successfully
        (False, True),   # edge: inactive user -> AuthenticationFailed
    ],
)
def test_jwt_authentication__authenticate_credentials(monkeypatch, payload_user_active, expect_exception):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    auth = JWTAuthentication()
    request = _dummy_request()
    token = "dummy.token.value"

    # Create dummy user class and manager to replace User used inside the backend module
    class DummyUser:
        def __init__(self, active=True):
            self.is_active = active

        # Representational convenience for debugging/assertion
        def __repr__(self):
            return f"<DummyUser active={self.is_active}>"

    class DummyManager:
        def __init__(self, active=True):
            self._active = active

        def get(self, pk=None):
            # Emulate Django's get signature (accept pk or other kwargs)
            return DummyUser(active=self._active)

    # Monkeypatch the jwt.decode used inside the authentication backend to return a predictable payload
    monkeypatch.setattr(auth_backends, "jwt", SimpleNamespace(decode=lambda tok, key, algorithms: {"id": 42}))

    # Replace the User class in the backend module with a dummy that has an objects manager
    dummy_user_cls = type("U", (), {"objects": DummyManager(active=payload_user_active), "DoesNotExist": Exception})
    monkeypatch.setattr(auth_backends, "User", dummy_user_cls)

    # Act / Assert
    if expect_exception:
        with pytest.raises(drf_exceptions.AuthenticationFailed):
            # Act
            auth._authenticate_credentials(request, token)
    else:
        # Act
        result = auth._authenticate_credentials(request, token)

        # Assert
        # DRF authentication methods often return a (user, token) tuple
        assert result is not None
        if isinstance(result, tuple):
            user_obj, returned_token = result
            assert hasattr(user_obj, "is_active") and user_obj.is_active is True
            assert returned_token == token
        else:
            # Some implementations may return the user directly
            assert hasattr(result, "is_active") and result.is_active is True


def test_jwt_authentication_invalid_token_raises(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    auth = JWTAuthentication()
    request = _dummy_request()
    token = "bad.token"

    # Make jwt.decode raise an error similar to jwt.InvalidTokenError
    class DummyJWT:
        class InvalidTokenError(Exception):
            pass

        @staticmethod
        def decode(t, key, algorithms):
            raise DummyJWT.InvalidTokenError("invalid")

    monkeypatch.setattr(auth_backends, "jwt", DummyJWT)

    # Act / Assert
    with pytest.raises(drf_exceptions.AuthenticationFailed):
        auth._authenticate_credentials(request, token)


@pytest.mark.parametrize(
    "body_value, expected_str",
    [
        ("Hello, world!", "Hello, world!"),  # normal: returns body
        ("", ""),                             # edge: empty body -> empty string
    ],
)
def test_comment___str__(body_value, expected_str):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # Instantiate a Comment without saving to DB; __str__ typically returns the body
    comment = Comment(body=body_value)

    # Act
    s = str(comment)

    # Assert
    assert isinstance(s, str)
    assert s == expected_str


@pytest.mark.parametrize(
    "get_object_side_effect, expect_handled, expect_deleted_flag",
    [
        (None, False, True),               # success: object returned and deleted
        (ValueError("boom"), True, False), # error: get_object raises -> _handle_generic_error should be used
    ],
)
def test_comments_destroy_view_delete(monkeypatch, get_object_side_effect, expect_handled, expect_deleted_flag):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    view = CommentsDestroyAPIView()
    request = _dummy_request()

    # Prepare a mock comment that records deletion
    class MockComment:
        def __init__(self):
            self.deleted = False

        def delete(self):
            self.deleted = True

    mock_comment = MockComment()

    if get_object_side_effect is None:
        # Normal path: get_object returns the mock comment
        monkeypatch.setattr(view, "get_object", lambda *args, **kwargs: mock_comment)
    else:
        # Error path: get_object raises
        def raise_exc(*a, **kw):
            raise get_object_side_effect
        monkeypatch.setattr(view, "get_object", raise_exc)

        # Monkeypatch the module-level _handle_generic_error used by the view so it's observable
        # The view module usually imports _handle_generic_error; patch it there.
        monkeypatch.setattr(articles_views, "_handle_generic_error", lambda exc: "handled-by-test")

    # Act
    result = view.delete(request, pk=1)

    # Assert
    if expect_handled:
        assert result == "handled-by-test"
        assert mock_comment.deleted is False
    else:
        # On normal successful delete, verify deletion occurred and response indicates success (204 or 200)
        assert mock_comment.deleted is expect_deleted_flag
        # The DRF Response should have status_code attribute for destroy; accept common success codes
        status_code = getattr(result, "status_code", None)
        assert status_code in (200, 204, None)  # None allowed if view returns nothing; focus on side-effect
