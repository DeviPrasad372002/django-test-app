import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import pytest
    from types import SimpleNamespace

    from conduit.apps.authentication import models as auth_models
    from conduit.apps.authentication import backends as auth_backends
    from conduit.apps.authentication import serializers as auth_serializers
    from rest_framework import exceptions as drf_exceptions
except ImportError as e:
    import pytest
    pytest.skip(f"Required modules for integration tests are missing: {e}", allow_module_level=True)


def test_user_token_generates_jwt_and_jwt_authentication_resolves_user(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    user = auth_models.User(username="integ_user", email="integ@example.com")
    # give the user an id as Django would after saving; token generation often relies on id/pk
    setattr(user, "id", 1)

    captured = {}

    def fake_encode(payload, key, algorithm="HS256"):
        # capture payload for assertion and return bytes to simulate jwt.encode behavior
        captured['payload'] = payload
        return b"fake.jwt.token"

    # Patch the jwt.encode used in the authentication models module
    monkeypatch.setattr(auth_models, "jwt", SimpleNamespace(encode=fake_encode))

    # Act
    # call token property (or method) that should call jwt.encode internally
    tok = getattr(user, "token") if hasattr(user, "token") else user.token  # access property

    # Assert - token was produced and payload contains user id/username/email
    assert tok in (b"fake.jwt.token", "fake.jwt.token", b"fake.jwt.token".decode("utf-8"))
    assert "user_id" in captured['payload'] or "id" in captured['payload'] or "pk" in captured['payload']

    # Now ensure JWTAuthentication can validate such token and return the user
    # Arrange continued: monkeypatch jwt.decode used in the backend to return payload with user_id
    def fake_decode(token, key, algorithms=None):
        return {"user_id": 1}

    monkeypatch.setattr(auth_backends, "jwt", SimpleNamespace(decode=fake_decode))

    # monkeypatch the ORM call that would retrieve the user by pk
    class DummyManager:
        def get(self, **kwargs):
            # mimic Django's objects.get(pk=...) signature by accepting pk or id
            if kwargs.get("pk") == 1 or kwargs.get("id") == 1:
                return user
            raise auth_models.User.DoesNotExist()

    # Attach the dummy manager to the User class for this test
    monkeypatch.setattr(auth_models.User, "objects", DummyManager(), raising=False)

    # Act
    authenticated_user = auth_backends.JWTAuthentication()._authenticate_credentials("fake.jwt.token")

    # Assert
    assert authenticated_user is user


def test_jwt_authentication_with_invalid_token_raises_authentication_failed(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange: make jwt.decode raise an error as would happen for an invalid token
    def fake_decode_raises(token, key, algorithms=None):
        raise Exception("Invalid token")

    monkeypatch.setattr(auth_backends, "jwt", SimpleNamespace(decode=fake_decode_raises))

    # Also ensure User.objects.get won't be called (but provide a dummy to be safe)
    class DummyManager:
        def get(self, **kwargs):
            raise auth_models.User.DoesNotExist()

    monkeypatch.setattr(auth_models.User, "objects", DummyManager(), raising=False)

    # Act / Assert: expect DRF AuthenticationFailed to be raised
    with pytest.raises(getattr(drf_exceptions, "AuthenticationFailed", Exception)):
        auth_backends.JWTAuthentication()._authenticate_credentials("bad.token")


def test_registration_serializer_uses_create_user_and_returns_created_user(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    validated = {"username": "newuser", "email": "new@example.com", "password": "s3cr3t"}
    created_called = {}

    # Prepare a fake user object to be returned by the patched create_user
    fake_user = auth_models.User(username=validated["username"], email=validated["email"])
    setattr(fake_user, "id", 42)

    # Try patching the typical places create_user might live: User.objects.create_user or UserManager.create_user
    def fake_create_user(**kwargs):
        # record call arguments
        created_called['kwargs'] = kwargs
        return fake_user

    patched = False
    # Patch User.objects.create_user if available
    try:
        orig_manager = getattr(auth_models.User, "objects")
        # Use monkeypatch to set attribute on the manager
        monkeypatch.setattr(orig_manager.__class__, "create_user", lambda self, **kw: fake_create_user(**kw), raising=False)
        patched = True
    except Exception:
        pass

    if not patched:
        # Fallback: try to patch a UserManager class attribute if present
        if hasattr(auth_models, "UserManager"):
            try:
                monkeypatch.setattr(auth_models.UserManager, "create_user", staticmethod(lambda **kw: fake_create_user(**kw)), raising=False)
                patched = True
            except Exception:
                patched = False

    if not patched:
        pytest.skip("Could not patch create_user on User objects/manager; skipping registration create test")

    # Act
    # Call the serializer.create directly with validated data (common DRF pattern)
    created = auth_serializers.RegistrationSerializer().create(validated)

    # Assert
    assert created is fake_user
    # Ensure the create_user got called with expected keys
    assert created_called.get("kwargs") is not None
    assert created_called["kwargs"].get("username") == validated["username"]
    assert created_called["kwargs"].get("email") == validated["email"]
    assert created_called["kwargs"].get("password") == validated["password"]
