import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import json
    import pytest
    from conduit.apps.articles.renderers import ArticleJSONRenderer, CommentJSONRenderer
    from conduit.apps.articles.signals import add_slug_to_article_if_not_exists
except ImportError:
    import pytest  # noqa: F401
    pytest.skip("conduit.apps.articles modules are required for these tests", allow_module_level=True)


@pytest.mark.parametrize(
    "renderer_class, wrapper_key, input_data, expected_outer",
    [
        # normal case: a plain article/comment dict should be wrapped
        (ArticleJSONRenderer, "article", {"title": "T", "body": "B"}, {"article": {"title": "T", "body": "B"}}),
        (CommentJSONRenderer, "comment", {"body": "Nice!"}, {"comment": {"body": "Nice!"}}),
        # edge case: already wrapped â€” renderer should not double-wrap
        (ArticleJSONRenderer, "article", {"article": {"title": "X"}}, {"article": {"title": "X"}}),
        (CommentJSONRenderer, "comment", {"comment": {"body": "Y"}}, {"comment": {"body": "Y"}}),
    ],
)
def test_json_renderers_wrap_or_preserve(renderer_class, wrapper_key, input_data, expected_outer):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange: create renderer instance
    renderer = renderer_class()

    # Act: render the provided input data
    rendered = renderer.render(input_data)

    # If the renderer returns bytes decode to text for JSON parsing
    if isinstance(rendered, bytes):
        rendered_text = rendered.decode("utf-8")
    else:
        rendered_text = rendered

    parsed = json.loads(rendered_text)

    # Assert: final JSON structure exactly matches expected envelope
    assert parsed == expected_outer, f"{renderer_class.__name__} did not produce expected wrapper"


@pytest.mark.parametrize(
    "initial_slug, created_flag, expected_predicate",
    [
        # when created=True and no slug -> slug should be generated (non-empty string)
        (None, True, lambda s: isinstance(s, str) and len(s) > 0),
        # when created=False and no slug -> slug should remain None
        (None, False, lambda s: s is None),
        # when slug already present -> should remain unchanged regardless of created flag
        ("existing-slug", True, lambda s: s == "existing-slug"),
    ],
)
def test_add_slug_to_article_if_not_exists_sets_or_preserves_slug(initial_slug, created_flag, expected_predicate):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange: a minimal dummy article-like object with title and slug attributes
    class DummyArticle:
        def __init__(self, title, slug):
            self.title = title
            self.slug = slug

    article = DummyArticle(title="Some Interesting Title", slug=initial_slug)

    # Act: simulate signal handler invocation
    # Many Django signal handlers accept sender, instance, created, **kwargs
    # Provide those expected params; handler should mutate instance.slug as appropriate.
    add_slug_to_article_if_not_exists(sender=None, instance=article, created=created_flag, **{})

    # Assert: check the slug satisfies expected predicate
    assert expected_predicate(getattr(article, "slug", None)), (
        "add_slug_to_article_if_not_exists did not produce expected slug behavior "
        f"for initial_slug={initial_slug!r}, created_flag={created_flag}"
    )
