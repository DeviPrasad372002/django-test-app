import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.exists(_target):
    if _target not in sys.path: sys.path.insert(0, _target)
    try: os.chdir(_target)
    except Exception: pass

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

def _apply_compatibility_fixes():
    try:
        import jinja2
        if not hasattr(jinja2, 'Markup'):
            try:
                from markupsafe import Markup, escape
                jinja2.Markup = Markup
                if not hasattr(jinja2, 'escape'):
                    jinja2.escape = escape
            except Exception:
                pass
    except ImportError:
        pass
    try:
        import collections as _collections, collections.abc as _abc
        for _n in ('Mapping','MutableMapping','Sequence','Iterable','Container',
                   'MutableSequence','Set','MutableSet','Iterator','Generator','Callable','Collection'):
            if not hasattr(_collections, _n) and hasattr(_abc, _n):
                setattr(_collections, _n, getattr(_abc, _n))
    except Exception:
        pass
    try:
        import marshmallow as _mm
        if not hasattr(_mm, "__version__"):
            _mm.__version__ = "4"
    except Exception:
        pass

_apply_compatibility_fixes()

# Minimal, safe Django bootstrap. If anything goes wrong, skip the module (repo-agnostic).
try:
    import django
    from django.conf import settings as _dj_settings
    from django import apps as _dj_apps

    if not _dj_settings.configured:
        _cfg = dict(
            DEBUG=True,
            SECRET_KEY='pytest-secret',
            DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
            INSTALLED_APPS=[
                'django.contrib.auth','django.contrib.contenttypes',
                'django.contrib.sessions','django.contrib.messages'
            ],
            MIDDLEWARE=[
                'django.middleware.security.SecurityMiddleware',
                'django.contrib.sessions.middleware.SessionMiddleware',
                'django.middleware.common.CommonMiddleware',
            ],
            USE_TZ=True, TIME_ZONE='UTC',
        )
        try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
        except Exception: pass
        try: _dj_settings.configure(**_cfg)
        except Exception: pass

    if not _dj_apps.ready:
        try: django.setup()
        except Exception: pass

    # Probe a known Django core that previously crashed on some stacks.
    try:
        import django.contrib.auth.base_user as _dj_probe  # noqa
    except Exception as _e:
        _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
except Exception as _e:
    # Do NOT crash the entire test session â€“ make the module opt-out.
    _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)


# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import pytest
    import inspect
    from unittest import mock
    import types

    import conduit.apps.authentication.models as auth_models
    import conduit.apps.authentication.signals as auth_signals
    import conduit.apps.core.utils as core_utils
    import conduit.apps.profiles.models as profiles_models
except ImportError:
    import pytest
    pytest.skip("Skipping tests: required modules not available", allow_module_level=True)


def _exc_lookup(name, default):
    try:
        import builtins
        return getattr(builtins, name, default)
    except Exception:
        return default


@pytest.mark.parametrize(
    "jwt_return, expected_token",
    [
        (b"byte-token-xyz", "byte-token-xyz"),
        ("string-token-abc", "string-token-abc"),
    ],
)
def test__generate_jwt_token_returns_string_for_bytes_and_str(monkeypatch, jwt_return, expected_token):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # locate generate function either as module-level or on User class
    gen_func = None
    if hasattr(auth_models, "_generate_jwt_token"):
        gen_func = auth_models._generate_jwt_token
    elif hasattr(getattr(auth_models, "User", object), "_generate_jwt_token"):
        gen_func = getattr(auth_models.User, "_generate_jwt_token")
    else:
        pytest.skip("No _generate_jwt_token found to test")

    # Provide a dummy user-like object
    dummy_user = types.SimpleNamespace(id=123, pk=123, username="tester")

    # Mock the jwt module used inside the auth_models module
    mock_jwt = mock.Mock()
    def fake_encode(*args, **kwargs):
        return jwt_return
    mock_jwt.encode = fake_encode
    monkeypatch.setattr(auth_models, "jwt", mock_jwt, raising=False)

    # Act
    # Try calling with the user instance; fallback to id if signature requires it
    try:
        result = gen_func(dummy_user)
    except TypeError:
        result = gen_func(dummy_user.id)

    # Assert
    assert isinstance(result, _exc_lookup("str", Exception))
    assert result == expected_token


def test__generate_jwt_token_propagates_encoding_errors(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    if hasattr(auth_models, "_generate_jwt_token"):
        gen_func = auth_models._generate_jwt_token
    elif hasattr(getattr(auth_models, "User", object), "_generate_jwt_token"):
        gen_func = getattr(auth_models.User, "_generate_jwt_token")
    else:
        pytest.skip("No _generate_jwt_token found to test")

    dummy_user = types.SimpleNamespace(id=7, pk=7, username="erruser")

    # Mock jwt.encode to raise an error
    def raise_encode(*args, **kwargs):
        raise RuntimeError("encode failure")
    mock_jwt = mock.Mock()
    mock_jwt.encode = raise_encode
    monkeypatch.setattr(auth_models, "jwt", mock_jwt, raising=False)

    # Act / Assert: ensure exception surfaces (using generic Exception lookup)
    with pytest.raises(_exc_lookup("RuntimeError", Exception)):
        try:
            gen_func(dummy_user)
        except TypeError:
            gen_func(dummy_user.id)


@pytest.mark.parametrize(
    "username_value",
    [
        "alice",
        "",
    ],
)
def test_get_short_name_returns_username_string(username_value):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    if not hasattr(auth_models, "User"):
        pytest.skip("User class not present")
    user_method = getattr(auth_models.User, "get_short_name", None)
    if user_method is None:
        pytest.skip("get_short_name method not present on User")

    # Create a lightweight object with the attribute(s) the method expects
    dummy = types.SimpleNamespace(username=username_value, email="e@example.com")

    # Act
    result = user_method(dummy)

    # Assert
    assert isinstance(result, _exc_lookup("str", Exception))
    assert result == username_value


@pytest.mark.parametrize("created_flag, should_create", [(True, True), (False, False)])
def test_create_related_profile_creates_profile_only_when_created_true(monkeypatch, created_flag, should_create):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    if not hasattr(auth_signals, "create_related_profile"):
        pytest.skip("create_related_profile not present")

    dummy_user = types.SimpleNamespace(id=55, username="newuser")

    # Capture calls to Profile.objects.create
    called = {"count": 0, "args": None, "kwargs": None}
    class DummyManager:
        def create(self, *args, **kwargs):
            called["count"] += 1
            called["args"] = args
            called["kwargs"] = kwargs
            return types.SimpleNamespace(user=args[0] if args else kwargs.get("user"))

    # Only proceed if Profile exists; otherwise skip
    if not hasattr(profiles_models, "Profile"):
        pytest.skip("Profile model not present")
    # Patch the manager
    monkeypatch.setattr(profiles_models.Profile, "objects", DummyManager(), raising=False)

    # Act
    auth_signals.create_related_profile(sender=None, instance=dummy_user, created=created_flag)

    # Assert
    if should_create:
        assert called["count"] == 1
        # Ensure the created profile received the user we provided
        assert called["args"] is not None
        assert called["args"][0] == dummy_user
    else:
        assert called["count"] == 0


@pytest.mark.parametrize("length", [0, 1, 16, 64])
def test_generate_random_string_length_and_content(monkeypatch, length):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    if not hasattr(core_utils, "generate_random_string"):
        pytest.skip("generate_random_string not present")
    # Force random.choice to return a predictable character
    import random
    monkeypatch.setattr(random, "choice", lambda seq: "x")
    # Act
    result = core_utils.generate_random_string(length)
    # Assert
    assert isinstance(result, _exc_lookup("str", Exception))
    assert len(result) == length
    assert result == "x" * length
