import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.exists(_target):
    if _target not in sys.path: sys.path.insert(0, _target)
    try: os.chdir(_target)
    except Exception: pass

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

def _apply_compatibility_fixes():
    try:
        import jinja2
        if not hasattr(jinja2, 'Markup'):
            try:
                from markupsafe import Markup, escape
                jinja2.Markup = Markup
                if not hasattr(jinja2, 'escape'):
                    jinja2.escape = escape
            except Exception:
                pass
    except ImportError:
        pass
    try:
        import collections as _collections, collections.abc as _abc
        for _n in ('Mapping','MutableMapping','Sequence','Iterable','Container',
                   'MutableSequence','Set','MutableSet','Iterator','Generator','Callable','Collection'):
            if not hasattr(_collections, _n) and hasattr(_abc, _n):
                setattr(_collections, _n, getattr(_abc, _n))
    except Exception:
        pass
    try:
        import marshmallow as _mm
        if not hasattr(_mm, "__version__"):
            _mm.__version__ = "4"
    except Exception:
        pass

_apply_compatibility_fixes()

# Minimal, safe Django bootstrap. If anything goes wrong, skip the module (repo-agnostic).
try:
    import django
    from django.conf import settings as _dj_settings
    from django import apps as _dj_apps

    if not _dj_settings.configured:
        _cfg = dict(
            DEBUG=True,
            SECRET_KEY='pytest-secret',
            DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
            INSTALLED_APPS=[
                'django.contrib.auth','django.contrib.contenttypes',
                'django.contrib.sessions','django.contrib.messages'
            ],
            MIDDLEWARE=[
                'django.middleware.security.SecurityMiddleware',
                'django.contrib.sessions.middleware.SessionMiddleware',
                'django.middleware.common.CommonMiddleware',
            ],
            USE_TZ=True, TIME_ZONE='UTC',
        )
        try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
        except Exception: pass
        try: _dj_settings.configure(**_cfg)
        except Exception: pass

    if not _dj_apps.ready:
        try: django.setup()
        except Exception: pass

    # Probe a known Django core that previously crashed on some stacks.
    try:
        import django.contrib.auth.base_user as _dj_probe  # noqa
    except Exception as _e:
        _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
except Exception as _e:
    # Do NOT crash the entire test session â€“ make the module opt-out.
    _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)


# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import json
    import types
    import pytest

    from conduit.apps.core import utils as core_utils
    from conduit.apps.authentication import models as auth_models
    from conduit.apps.authentication import renderers as auth_renderers
except ImportError:
    import pytest
    pytest.skip("Required modules for tests are not available", allow_module_level=True)


@pytest.mark.parametrize("length", [0, 1, 5])
def test_generate_random_string_returns_expected_length_and_characters(monkeypatch, length):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange: force the random.choice used inside generate_random_string to always return 'x'
    monkeypatch.setattr(core_utils, 'random', types.SimpleNamespace(choice=lambda seq: 'x'), raising=False)

    # Act
    result = core_utils.generate_random_string(length)

    # Assert
    assert isinstance(result, _exc_lookup("str", Exception))
    assert len(result) == length
    assert result == 'x' * length


def _call_generate_jwt(auth_models_module, user_instance):
    """
    Helper to call the JWT generator whether it's defined as a standalone function
    or as an instance method on the User object.
    """
    if hasattr(auth_models_module, "_generate_jwt_token"):
        return auth_models_module._generate_jwt_token(user_instance)
    if hasattr(user_instance, "_generate_jwt_token"):
        return user_instance._generate_jwt_token()
    raise AssertionError("No JWT generator found on module or User instance")


def test_generate_jwt_calls_jwt_encode_and_embeds_identifier(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    captured = {}

    def fake_encode(*args, **kwargs):
        # args[0] is expected to be the payload
        if args:
            captured['payload'] = args[0]
        else:
            captured['payload'] = kwargs.get('payload')
        # return a sentinel token value
        return b"FAKE.JWT.TOKEN"

    # Ensure we can set a fake jwt object on the module to intercept encode calls
    monkeypatch.setattr(auth_models, 'jwt', types.SimpleNamespace(encode=fake_encode), raising=False)

    # Create a lightweight User-like object using the User class if possible.
    # We do not save anything to a database; we only need an object with an id/pk attribute.
    try:
        user = auth_models.User(id=123)
    except Exception:
        # fallback to a simple object with id attribute if constructing the model raises
        user = types.SimpleNamespace(id=123, pk=123)

    # Act
    token = _call_generate_jwt(auth_models, user)

    # Assert: token is the fake returned value and payload included an identifier and an expiry
    assert token in (b"FAKE.JWT.TOKEN", "FAKE.JWT.TOKEN")
    payload = captured.get('payload')
    assert isinstance(payload, _exc_lookup("dict", Exception)), "JWT payload should be a mapping"
    # identifier may be stored under 'user_id' or 'id' depending on implementation
    assert ('user_id' in payload and payload['user_id'] in (getattr(user, 'id', None), getattr(user, 'pk', None))) or \
           ('id' in payload and payload['id'] in (getattr(user, 'id', None), getattr(user, 'pk', None)))
    # expiration key should exist in payload under a conventional name
    assert 'exp' in payload


@pytest.mark.parametrize("input_data", [
    ({"user": {"email": "alice@example.com", "username": "alice"}}),
    ({})  # edge case: empty data should still produce valid JSON bytes
])
def test_userjsonrenderer_renders_to_json_bytes_and_roundtrips(input_data):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    renderer = auth_renderers.UserJSONRenderer()

    # Act
    rendered = renderer.render(input_data)

    # Assert
    assert isinstance(rendered, (bytes, bytearray))
    # Ensure the bytes decode to valid JSON and match input structure where applicable
    decoded = json.loads(rendered.decode('utf-8'))
    # Renderers for user often wrap/return the passed data directly; at least the JSON should be a mapping
    assert isinstance(decoded, _exc_lookup("dict", Exception))
    # If input_data is empty, decoded can be empty mapping; otherwise ensure keys are preserved
    for key in input_data:
        assert key in decoded
        assert decoded[key] == input_data[key]
