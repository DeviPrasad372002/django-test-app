import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

import pytest

try:
    import json
    import conduit.apps.articles.renderers as articles_renderers
    from conduit.apps.articles.renderers import ArticleJSONRenderer, CommentJSONRenderer
    from conduit.apps.articles.signals import add_slug_to_article_if_not_exists
    from conduit.apps.core.utils import generate_random_string
except ImportError:
    pytest.skip("Requires project modules (conduit.apps.*) to run integration tests", allow_module_level=True)


def test_generate_random_string_returns_expected_length_and_alnum():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    length = 12

    # Act
    result = generate_random_string(length)

    # Assert
    assert isinstance(result, str), "generate_random_string should return a string"
    assert len(result) == length, "returned string should have requested length"
    # Alphanumeric check: allow letters and digits only
    assert result.isalnum(), "returned string should be alphanumeric"


@pytest.mark.parametrize(
    "initial_slug, title, should_create",
    [
        ("", "My Test Article", True),
        (None, "Another Title", True),
        ("already-exists", "Ignored Title", False),
    ],
)
def test_add_slug_to_article_if_not_exists_creates_or_preserves_slug(monkeypatch, initial_slug, title, should_create):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    class DummyArticle:
        def __init__(self, title, slug):
            self.title = title
            self.slug = slug

    article = DummyArticle(title=title, slug=initial_slug)

    # Ensure deterministic random portion: monkeypatch the generate_random_string used by the signal module
    monkeypatch.setattr(
        "conduit.apps.articles.signals.generate_random_string",
        lambda _n=6: "RNDSTR",
        raising=False,
    )

    # Act
    # The signal handler's signature is (sender, instance, **kwargs) in Django; call with None sender for direct invocation.
    add_slug_to_article_if_not_exists(sender=None, instance=article)

    # Assert
    if should_create:
        assert article.slug is not None and article.slug != "", "Slug should have been created"
        # It should end with our deterministic suffix
        assert article.slug.endswith("-RNDSTR"), "Created slug should include the random suffix"
        # Should not contain spaces
        assert " " not in article.slug, "Slug should be slugified (no spaces)"
    else:
        assert article.slug == "already-exists", "Existing slug should be preserved"


def test_add_slug_to_article_if_not_exists_raises_on_missing_title(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    class DummyNoTitle:
        def __init__(self, slug):
            self.slug = slug

    article = DummyNoTitle(slug="")

    # Ensure deterministic random portion
    monkeypatch.setattr(
        "conduit.apps.articles.signals.generate_random_string",
        lambda _n=6: "XYZ",
        raising=False,
    )

    # Act / Assert
    # Depending on implementation, missing title may raise AttributeError or TypeError when slugify is called.
    with pytest.raises((AttributeError, TypeError)):
        add_slug_to_article_if_not_exists(sender=None, instance=article)


@pytest.mark.parametrize(
    "renderer_cls, key",
    [
        (ArticleJSONRenderer, "article"),
        (CommentJSONRenderer, "comment"),
    ],
)
def test_json_renderers_wrap_payload_and_handle_json_errors(monkeypatch, renderer_cls, key):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    renderer = renderer_cls()
    payload = {"id": 1, "body": "test"}

    # Act - normal behavior
    output_bytes = renderer.render(payload)
    # Assert - should be JSON-serializable bytes that decode to {key: payload}
    assert isinstance(output_bytes, (bytes, bytearray)), "Renderer should return bytes"
    loaded = json.loads(output_bytes.decode("utf-8"))
    assert key in loaded, f"Renderer should wrap payload under '{key}'"
    assert loaded[key] == payload

    # Act & Assert - simulate json.dumps raising an error inside the renderer module to exercise error path
    def fake_dumps(_data):
        raise TypeError("fake json error")

    monkeypatch.setattr(articles_renderers.json, "dumps", fake_dumps)
    with pytest.raises(TypeError):
        renderer.render(payload)
