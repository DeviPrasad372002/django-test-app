import importlib.util, pytest
if importlib.util.find_spec('django') is None:
    pytest.skip('django not installed; skipping module', allow_module_level=True)

# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import pytest
    from typing import Any
    try:
        from conduit.apps.core.utils import generate_random_string
        from conduit.apps.authentication.models import User
        from conduit.apps.core import exceptions as core_exceptions
        from rest_framework.exceptions import NotFound
    except Exception:
        # If project modules or DRF aren't importable, skip the entire module.
        pytest.skip("Required project modules or DRF not available", allow_module_level=True)
except ImportError:
    import pytest
    pytest.skip("pytest is required to run tests", allow_module_level=True)


@pytest.mark.parametrize("length", [0, 1, 16])
def test_generate_random_string_returns_expected_length_and_type(length):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # length parameter is provided by parametrization above

    # Act
    result = generate_random_string(length)

    # Assert
    assert isinstance(result, str), "generate_random_string should return a str"
    assert len(result) == length, f"Expected length {length}, got {len(result)}"


def test_generate_random_string_non_int_raises_type_error():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    bad_input = "not-an-int"

    # Act / Assert
    with pytest.raises(TypeError):
        _ = generate_random_string(bad_input)


def test_user_get_short_name_and_generate_jwt_token_produces_string_and_contains_parts():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # Create a lightweight User instance without saving to DB; this should be fine for attribute/method calls.
    user_kwargs = {}
    # Prefer username if constructor accepts, otherwise rely on attributes being set after instantiation.
    try:
        user = User(username="alice", email="alice@example.com")
    except TypeError:
        # Fallback: instantiate without args and set attributes
        user = User()
        setattr(user, "username", "alice")
        setattr(user, "email", "alice@example.com")

    # Act
    short_name = user.get_short_name()
    # Some implementations may name the token method 'token' or '_generate_jwt_token'; try both.
    token_callable = None
    if hasattr(user, "_generate_jwt_token"):
        token_callable = getattr(user, "_generate_jwt_token")
    elif hasattr(user, "token"):
        token_callable = getattr(user, "token")
    else:
        token_callable = None

    token = None
    if callable(token_callable):
        token = token_callable()

    # Assert
    expected_short = getattr(user, "username", getattr(user, "email", None))
    assert isinstance(short_name, str)
    assert short_name == expected_short, "get_short_name should return the username (or fallback to email)"

    # Token assertions: if token method exists, ensure it returns a string that resembles a JWT (three segments)
    if token is not None:
        assert isinstance(token, str)
        # A simple heuristic: JWTs typically have two '.' separators separating three parts
        assert token.count(".") >= 2, "JWT token should contain at least two dots as separators"


@pytest.mark.parametrize(
    "exc, expected_status",
    [
        (NotFound(detail="missing resource"), 404),
        (Exception("generic failure"), 500),
    ],
)
def test_core_exception_handler_maps_exceptions_to_responses(exc: Exception, expected_status: int):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    context = {"request": None}

    # Act
    response = core_exceptions.core_exception_handler(exc, context)

    # Assert
    # The handler should return an object similar to DRF Response with status_code and data attributes.
    assert hasattr(response, "status_code"), "Response should have status_code attribute"
    assert hasattr(response, "data"), "Response should have data attribute"
    assert response.status_code == expected_status
    assert isinstance(response.data, (dict, list, str, type(None))), "Response.data should be a serializable structure"


def test_specific_error_handlers_return_expected_status_codes():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    nf = NotFound(detail="not found")
    gen = Exception("boom")

    # Act
    resp_nf = core_exceptions._handle_not_found_error(nf)
    resp_gen = core_exceptions._handle_generic_error(gen)

    # Assert
    assert hasattr(resp_nf, "status_code") and resp_nf.status_code == 404
    assert hasattr(resp_nf, "data")
    assert hasattr(resp_gen, "status_code") and resp_gen.status_code == 500
    assert hasattr(resp_gen, "data")
